(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.PlayerTemplate = {
  name: "human (you)",
  character: "@",
  foreground: "white",
  maxHp: 40,
  attackValue: 10,
  sightRadius: 6,
  inventorySlots: 22,
  mixins: [Game.EntityMixins.PlayerActor, Game.EntityMixins.Attacker, Game.EntityMixins.Destructible, Game.EntityMixins.InventoryHolder, Game.EntityMixins.FoodConsumer, Game.EntityMixins.Sight, Game.EntityMixins.MessageRecipient, Game.EntityMixins.Equipper, Game.EntityMixins.ExperienceGainer, Game.EntityMixins.PlayerStatGainer]
};

},{"./../../game":33}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.EntityRepository == null) {
  Game.EntityRepository = new Game.Repository("entities", Game.Entity);
}

Game.EntityRepository.define("bat", {
  name: "bat",
  character: "B",
  foreground: "white",
  maxHp: 5,
  attackValue: 4,
  speed: 2000,
  mixins: [Game.EntityMixins.TaskActor, Game.EntityMixins.Attacker, Game.EntityMixins.Destructible, Game.EntityMixins.CorpseDropper, Game.EntityMixins.ExperienceGainer, Game.EntityMixins.RandomStatGainer]
});

},{"./../../game":33}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.EntityRepository == null) {
  Game.EntityRepository = new Game.Repository("entities", Game.Entity);
}

Game.EntityRepository.define("fungus", {
  name: "fungus",
  character: "F",
  foreground: "green",
  maxHp: 10,
  speed: 250,
  mixins: [Game.EntityMixins.FungusActor, Game.EntityMixins.Destructible, Game.EntityMixins.ExperienceGainer, Game.EntityMixins.RandomStatGainer]
});

},{"./../../game":33}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.EntityRepository = new Game.Repository("entities", Game.Entity);

Game.EntityRepository.define("giant zombie", {
  name: "giant zombie",
  character: "Z",
  foreground: "teal",
  maxHp: 30,
  attackValue: 8,
  defenseValue: 5,
  level: 5,
  sightRadius: 6,
  mixins: [Game.EntityMixins.GiantZombieActor, Game.EntityMixins.Sight, Game.EntityMixins.Attacker, Game.EntityMixins.Destructible, Game.EntityMixins.CorpseDropper, Game.EntityMixins.ExperienceGainer]
}, {
  disableRandomCreation: true
});

},{"./../../game":33}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.EntityRepository = new Game.Repository("entities", Game.Entity);

Game.EntityRepository.define("kobold", {
  name: "kobold",
  character: "k",
  foreground: "white",
  maxHp: 6,
  attackValue: 4,
  sightRadius: 5,
  tasks: ["hunt", "wander"],
  mixins: [Game.EntityMixins.TaskActor, Game.EntityMixins.Sight, Game.EntityMixins.Attacker, Game.EntityMixins.Destructible, Game.EntityMixins.CorpseDropper, Game.EntityMixins.ExperienceGainer, Game.EntityMixins.RandomStatGainer]
});

},{"./../../game":33}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.EntityRepository == null) {
  Game.EntityRepository = new Game.Repository("entities", Game.Entity);
}

Game.EntityRepository.define("newt", {
  name: "newt",
  character: ":",
  foreground: "yellow",
  maxHp: 3,
  attackValue: 2,
  mixins: [Game.EntityMixins.TaskActor, Game.EntityMixins.Attacker, Game.EntityMixins.Destructible, Game.EntityMixins.CorpseDropper, Game.EntityMixins.ExperienceGainer, Game.EntityMixins.RandomStatGainer]
});

},{"./../../game":33}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.EntityRepository = new Game.Repository("entities", Game.Entity);

Game.EntityRepository.define("slime", {
  name: "slime",
  character: "s",
  foreground: "lightGreen",
  maxHp: 10,
  attackValue: 5,
  sightRadius: 3,
  tasks: ["hunt", "wander"],
  mixins: [Game.EntityMixins.TaskActor, Game.EntityMixins.Sight, Game.EntityMixins.Attacker, Game.EntityMixins.Destructible, Game.EntityMixins.CorpseDropper, Game.EntityMixins.ExperienceGainer, Game.EntityMixins.RandomStatGainer]
});

},{"./../../game":33}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.ItemRepository == null) {
  Game.ItemRepository = new Game.Repository("items", Game.Item);
}

Game.ItemRepository.define("apple", {
  name: "apple",
  character: "%",
  foreground: "red",
  foodValue: 50,
  mixins: [Game.ItemMixins.Edible]
});

},{"./../../game":33}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.ItemRepository == null) {
  Game.ItemRepository = new Game.Repository("items", Game.Item);
}

Game.ItemRepository.define("chainmail", {
  name: "chainmail",
  character: "[",
  foreground: "white",
  defenseValue: 4,
  wearable: true,
  mixins: [Game.ItemMixins.Equippable]
}, {
  disableRandomCreation: true
});

},{"./../../game":33}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.ItemRepository == null) {
  Game.ItemRepository = new Game.Repository("items", Game.Item);
}

Game.ItemRepository.define("corpse", {
  name: "corpse",
  character: "%",
  foodValue: 75,
  consumptions: 1,
  mixins: [Game.ItemMixins.Edible]
}, {
  disableRandomCreation: true
});

},{"./../../game":33}],11:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.ItemRepository == null) {
  Game.ItemRepository = new Game.Repository("items", Game.Item);
}

Game.ItemRepository.define("dagger", {
  name: "dagger",
  character: ")",
  foreground: "gray",
  attackValue: 5,
  wieldable: true,
  mixins: [Game.ItemMixins.Equippable]
}, {
  disableRandomCreation: true
});

},{"./../../game":33}],12:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.ItemRepository == null) {
  Game.ItemRepository = new Game.Repository("items", Game.Item);
}

Game.ItemRepository.define("melon", {
  name: "melon",
  character: "%",
  foreground: "lightGreen",
  foodValue: 35,
  consumptions: 4,
  mixins: [Game.ItemMixins.Edible]
});

},{"./../../game":33}],13:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.ItemRepository == null) {
  Game.ItemRepository = new Game.Repository("items", Game.Item);
}

Game.ItemRepository.define("platemail", {
  name: "platemail",
  character: "[",
  foreground: "aliceblue",
  defenseValue: 6,
  wearable: true,
  mixins: [Game.ItemMixins.Equippable]
}, {
  disableRandomCreation: true
});

},{"./../../game":33}],14:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.ItemRepository == null) {
  Game.ItemRepository = new Game.Repository("items", Game.Item);
}

Game.ItemRepository.define("pumpkin", {
  name: "pumpkin",
  character: "%",
  foreground: "orange",
  foodValue: 50,
  attackValue: 2,
  defenseValue: 2,
  wearable: true,
  wieldable: true,
  mixins: [Game.ItemMixins.Edible, Game.ItemMixins.Equippable]
});

},{"./../../game":33}],15:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.ItemRepository == null) {
  Game.ItemRepository = new Game.Repository("items", Game.Item);
}

Game.ItemRepository.define("rock", {
  name: "rock",
  character: "*",
  foreground: "white"
});

},{"./../../game":33}],16:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.ItemRepository == null) {
  Game.ItemRepository = new Game.Repository("items", Game.Item);
}

Game.ItemRepository.define("staff", {
  name: "staff",
  character: ")",
  foreground: "yellow",
  attackValue: 5,
  defenseValue: 3,
  wieldable: true,
  mixins: [Game.ItemMixins.Equippable]
}, {
  disableRandomCreation: true
});

},{"./../../game":33}],17:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.ItemRepository == null) {
  Game.ItemRepository = new Game.Repository("items", Game.Item);
}

Game.ItemRepository.define("sword", {
  name: "sword",
  character: ")",
  foreground: "white",
  attackValue: 10,
  wieldable: true,
  mixins: [Game.ItemMixins.Equippable]
}, {
  disableRandomCreation: true
});

},{"./../../game":33}],18:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.ItemRepository == null) {
  Game.ItemRepository = new Game.Repository("items", Game.Item);
}

Game.ItemRepository.define("tunic", {
  name: "tunic",
  character: "[",
  foreground: "green",
  defenseValue: 2,
  wearable: true,
  mixins: [Game.ItemMixins.Equippable]
}, {
  disableRandomCreation: true
});

},{"./../../game":33}],19:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.Screen == null) {
  Game.Screen = {};
}

Game.Screen.dropScreen = new Game.Screen.ItemListScreen({
  caption: "Choose the item you wish to drop",
  canSelect: true,
  canSelectMultipleItems: false,
  ok: function(selectedItems) {
    this._player.dropItem(Object.keys(selectedItems)[0]);
    return true;
  }
});

},{"./../../game":33}],20:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.Screen == null) {
  Game.Screen = {};
}

Game.Screen.eatScreen = new Game.Screen.ItemListScreen({
  caption: "Choose the item you wish to eat",
  canSelect: true,
  canSelectMultipleItems: false,
  isAcceptable: function(item) {
    return item && item.hasMixin("Edible");
  },
  ok: function(selectedItems) {
    var item, key;
    key = Object.keys(selectedItems)[0];
    item = selectedItems[key];
    Game.sendMessage(this._player, "You eat %s.", [item.describeThe()]);
    item.eat(this._player);
    if (!item.hasRemainingConsumptions()) {
      this._player.removeItem(key);
    }
    return true;
  }
});

},{"./../../game":33}],21:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.Screen == null) {
  Game.Screen = {};
}

Game.Screen.examineScreen = new Game.Screen.ItemListScreen({
  caption: "Choose the item you wish to examine",
  canSelect: true,
  canSelectMultipleItems: false,
  isAcceptable: function(item) {
    return true;
  },
  ok: function(selectedItems) {
    var item, keys;
    keys = Object.keys(selectedItems);
    if (keys.length > 0) {
      item = selectedItems[keys[0]];
      Game.sendMessage(this._player, "It's %s (%s).", [item.describeA(false), item.details()]);
    }
    return true;
  }
});

},{"./../../game":33}],22:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.Screen == null) {
  Game.Screen = {};
}

Game.Screen.gainStatScreen = {
  setup: function(entity) {
    this._entity = entity;
    return this._options = entity.getStatOptions();
  },
  render: function(display) {
    var i, letters;
    letters = "abcdefghijklmnopqrstuvwxyz";
    display.drawText(0, 0, "Choose a stat to increase: ");
    i = 0;
    while (i < this._options.length) {
      display.drawText(0, 2 + i, letters.substring(i, i + 1) + " - " + this._options[i][0]);
      i++;
    }
    return display.drawText(0, 4 + this._options.length, "Remaining points: " + this._entity.getStatPoints());
  },
  handleInput: function(inputType, inputData) {
    var index;
    if (inputType === "keydown") {
      if (inputData.keyCode >= ROT.VK_A && inputData.keyCode <= ROT.VK_Z) {
        index = inputData.keyCode - ROT.VK_A;
        if (this._options[index]) {
          this._options[index][1].call(this._entity);
          this._entity.setStatPoints(this._entity.getStatPoints() - 1);
          if (this._entity.getStatPoints() === 0) {
            return Game.Screen.playScreen.setSubScreen(undefined);
          } else {
            return Game.refresh();
          }
        }
      }
    }
  }
};

},{"./../../game":33}],23:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.Screen == null) {
  Game.Screen = {};
}

Game.Screen.helpScreen = {
  render: function(display) {
    var border, text, y;
    text = "jsrogue help";
    border = "-------------";
    y = 0;
    display.drawText(Game.getScreenWidth() / 2 - text.length / 2, y++, text);
    display.drawText(Game.getScreenWidth() / 2 - text.length / 2, y++, border);
    display.drawText(0, y++, "The villagers have been complaining of a terrible stench coming from the cave.");
    display.drawText(0, y++, "Find the source of this smell and get rid of it!");
    y += 3;
    display.drawText(0, y++, "[,] to pick up items");
    display.drawText(0, y++, "[d] to drop items");
    display.drawText(0, y++, "[e] to eat items");
    display.drawText(0, y++, "[w] to wield items");
    display.drawText(0, y++, "[W] to wield items");
    display.drawText(0, y++, "[x] to examine items");
    display.drawText(0, y++, "[;] to look around you");
    display.drawText(0, y++, "[?] to show this help screen");
    y += 3;
    text = "--- press any key to continue ---";
    return display.drawText(Game.getScreenWidth() / 2 - text.length / 2, y++, text);
  },
  handleInput: function(inputType, inputData) {
    return Game.Screen.playScreen.setSubScreen(null);
  }
};

},{"./../../game":33}],24:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.Screen == null) {
  Game.Screen = {};
}

Game.Screen.inventoryScreen = new Game.Screen.ItemListScreen({
  caption: "Inventory",
  canSelect: false
});

},{"./../../game":33}],25:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.Screen == null) {
  Game.Screen = {};
}

Game.Screen.lookScreen = new Game.Screen.TargetBasedScreen({
  captionFunction: function(x, y) {
    var entity, item, items, map, z;
    z = this._player.getZ();
    map = this._player.getMap();
    if (map.isExplored(x, y, z)) {
      if (this._visibleCells[x + "," + y]) {
        items = map.getItemsAt(x, y, z);
        if (items) {
          item = items[items.length - 1];
          return String.format("%s - %s (%s)", item.getRepresentation(), item.describeA(true), item.details());
        } else if (map.getEntityAt(x, y, z)) {
          entity = map.getEntityAt(x, y, z);
          return String.format("%s - %s (%s)", entity.getRepresentation(), entity.describeA(true), entity.details());
        }
      }
      return String.format("%s - %s", map.getTile(x, y, z).getRepresentation(), map.getTile(x, y, z).getDescription());
    } else {
      return String.format("%s - %s", Game.Tile.nullTile.getRepresentation(), Game.Tile.nullTile.getDescription());
    }
  }
});

},{"./../../game":33}],26:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.Screen == null) {
  Game.Screen = {};
}

Game.Screen.loseScreen = {
  enter: function() {
    return console.log("Entered lose screen.");
  },
  exit: function() {
    return console.log("Exited lose screen.");
  },
  render: function(display) {
    var i, _results;
    i = 0;
    _results = [];
    while (i < 22) {
      display.drawText(2, i + 1, "%b{red}You lose! :(");
      _results.push(i++);
    }
    return _results;
  },
  handleInput: function(inputType, inputData) {}
};

},{"./../../game":33}],27:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.Screen == null) {
  Game.Screen = {};
}

Game.Screen.pickupScreen = new Game.Screen.ItemListScreen({
  caption: "Choose the items you wish to pickup",
  canSelect: true,
  canSelectMultipleItems: true,
  ok: function(selectedItems) {
    if (!this._player.pickupItems(Object.keys(selectedItems))) {
      Game.sendMessage(this._player, "Your inventory is full! Not all items were picked up.");
    }
    return true;
  }
});

},{"./../../game":33}],28:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.Screen == null) {
  Game.Screen = {};
}

Game.Screen.playScreen = {
  _player: null,
  _gameEnded: false,
  _subScreen: null,
  enter: function() {
    var depth, height, map, tiles, width;
    width = 100;
    height = 48;
    depth = 6;
    this._player = new Game.Entity(Game.PlayerTemplate);
    tiles = new Game.Builder(width, height, depth).getTiles();
    map = new Game.Map.Cave(tiles, this._player);
    return map.getEngine().start();
  },
  exit: function() {
    return console.log("Exited play screen.");
  },
  render: function(display) {
    var hungerState, i, messageY, messages, screenHeight, screenWidth, stats;
    if (this._subScreen) {
      this._subScreen.render(display);
      return;
    }
    screenWidth = Game.getScreenWidth();
    screenHeight = Game.getScreenHeight();
    this.renderTiles(display);
    messages = this._player.getMessages();
    messageY = 0;
    i = 0;
    while (i < messages.length) {
      messageY += display.drawText(0, messageY, "%c{white}%b{black}" + messages[i]);
      i++;
    }
    stats = "%c{white}%b{black}";
    stats += vsprintf("HP: %d/%d L: %d XP: %d", [this._player.getHp(), this._player.getMaxHp(), this._player.getLevel(), this._player.getExperience()]);
    display.drawText(0, screenHeight, stats);
    hungerState = this._player.getHungerState();
    return display.drawText(screenWidth - hungerState.length, screenHeight, hungerState);
  },
  getScreenOffsets: function() {
    var topLeftX, topLeftY;
    topLeftX = Math.max(0, this._player.getX() - (Game.getScreenWidth() / 2));
    topLeftX = Math.min(topLeftX, this._player.getMap().getWidth() - Game.getScreenWidth());
    topLeftY = Math.max(0, this._player.getY() - (Game.getScreenHeight() / 2));
    topLeftY = Math.min(topLeftY, this._player.getMap().getHeight() - Game.getScreenHeight());
    return {
      x: topLeftX,
      y: topLeftY
    };
  },
  renderTiles: function(display) {
    var currentDepth, foreground, glyph, items, map, offsets, screenHeight, screenWidth, topLeftX, topLeftY, visibleCells, x, y, _results;
    screenWidth = Game.getScreenWidth();
    screenHeight = Game.getScreenHeight();
    offsets = this.getScreenOffsets();
    topLeftX = offsets.x;
    topLeftY = offsets.y;
    visibleCells = {};
    map = this._player.getMap();
    currentDepth = this._player.getZ();
    map.getFov(currentDepth).compute(this._player.getX(), this._player.getY(), this._player.getSightRadius(), function(x, y, radius, visibility) {
      visibleCells[x + "," + y] = true;
      return map.setExplored(x, y, currentDepth, true);
    });
    x = topLeftX;
    _results = [];
    while (x < topLeftX + screenWidth) {
      y = topLeftY;
      while (y < topLeftY + screenHeight) {
        if (map.isExplored(x, y, currentDepth)) {
          glyph = map.getTile(x, y, currentDepth);
          foreground = glyph.getForeground();
          if (visibleCells[x + "," + y]) {
            items = map.getItemsAt(x, y, currentDepth);
            if (items) {
              glyph = items[items.length - 1];
            }
            if (map.getEntityAt(x, y, currentDepth)) {
              glyph = map.getEntityAt(x, y, currentDepth);
            }
            foreground = glyph.getForeground();
          } else {
            foreground = "darkGray";
          }
          display.draw(x - topLeftX, y - topLeftY, glyph.getChar(), foreground, glyph.getBackground());
        }
        y++;
      }
      _results.push(x++);
    }
    return _results;
  },
  handleInput: function(inputType, inputData) {
    var item, items, keyChar, offsets;
    if (this._gameEnded) {
      if (inputType === "keydown" && inputData.keyCode === ROT.VK_RETURN) {
        Game.switchScreen(Game.Screen.loseScreen);
      }
      return;
    }
    if (this._subScreen) {
      this._subScreen.handleInput(inputType, inputData);
      return;
    }
    if (inputType === "keydown") {
      if (inputData.keyCode === ROT.VK_LEFT) {
        this.move(-1, 0, 0);
      } else if (inputData.keyCode === ROT.VK_RIGHT) {
        this.move(1, 0, 0);
      } else if (inputData.keyCode === ROT.VK_UP) {
        this.move(0, -1, 0);
      } else if (inputData.keyCode === ROT.VK_DOWN) {
        this.move(0, 1, 0);
      } else if (inputData.keyCode === ROT.VK_I) {
        this.showItemsSubScreen(Game.Screen.inventoryScreen, this._player.getItems(), "You are not carrying anything.");
        return;
      } else if (inputData.keyCode === ROT.VK_D) {
        this.showItemsSubScreen(Game.Screen.dropScreen, this._player.getItems(), "You have nothing to drop.");
        return;
      } else if (inputData.keyCode === ROT.VK_E) {
        this.showItemsSubScreen(Game.Screen.eatScreen, this._player.getItems(), "You have nothing to eat.");
        return;
      } else if (inputData.keyCode === ROT.VK_W) {
        if (inputData.shiftKey) {
          this.showItemsSubScreen(Game.Screen.wearScreen, this._player.getItems(), "You have nothing to wear.");
        } else {
          this.showItemsSubScreen(Game.Screen.wieldScreen, this._player.getItems(), "You have nothing to wield.");
        }
        return;
      } else if (inputData.keyCode === ROT.VK_X) {
        this.showItemsSubScreen(Game.Screen.examineScreen, this._player.getItems(), "You have nothing to examine.");
        return;
      } else if (inputData.keyCode === ROT.VK_COMMA) {
        items = this._player.getMap().getItemsAt(this._player.getX(), this._player.getY(), this._player.getZ());
        if (items && items.length === 1) {
          item = items[0];
          if (this._player.pickupItems([0])) {
            Game.sendMessage(this._player, "You pick up %s.", [item.describeA()]);
          } else {
            Game.sendMessage(this._player, "Your inventory is full! Nothing was picked up.");
          }
        } else {
          this.showItemsSubScreen(Game.Screen.pickupScreen, items, "There is nothing here to pick up.");
        }
      } else {
        return;
      }
      return this._player.getMap().getEngine().unlock();
    } else if (inputType === "keypress") {
      keyChar = String.fromCharCode(inputData.charCode);
      if (keyChar === ">") {
        this.move(0, 0, 1);
      } else if (keyChar === "<") {
        this.move(0, 0, -1);
      } else if (keyChar === ";") {
        offsets = this.getScreenOffsets();
        Game.Screen.lookScreen.setup(this._player, this._player.getX(), this._player.getY(), offsets.x, offsets.y);
        this.setSubScreen(Game.Screen.lookScreen);
        return;
      } else if (keyChar === "?") {
        this.setSubScreen(Game.Screen.helpScreen);
        return;
      } else {
        return;
      }
      return this._player.getMap().getEngine().unlock();
    }
  },
  move: function(dX, dY, dZ) {
    var newX, newY, newZ;
    newX = this._player.getX() + dX;
    newY = this._player.getY() + dY;
    newZ = this._player.getZ() + dZ;
    return this._player.tryMove(newX, newY, newZ, this._player.getMap());
  },
  setGameEnded: function(gameEnded) {
    return this._gameEnded = gameEnded;
  },
  setSubScreen: function(subScreen) {
    this._subScreen = subScreen;
    return Game.refresh();
  },
  showItemsSubScreen: function(subScreen, items, emptyMessage) {
    if (items && subScreen.setup(this._player, items) > 0) {
      return this.setSubScreen(subScreen);
    } else {
      Game.sendMessage(this._player, emptyMessage);
      return Game.refresh();
    }
  }
};

},{"./../../game":33}],29:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.Screen == null) {
  Game.Screen = {};
}

Game.Screen.startScreen = {
  enter: function() {
    return console.log("Entered start screen.");
  },
  exit: function() {
    return console.log("Exited start screen.");
  },
  render: function(display) {
    display.drawText(1, 1, "%c{yellow}Javascript Roguelike");
    return display.drawText(1, 2, "Press [Enter] to start!");
  },
  handleInput: function(inputType, inputData) {
    if (inputType === "keydown") {
      if (inputData.keyCode === ROT.VK_RETURN) {
        return Game.switchScreen(Game.Screen.playScreen);
      }
    }
  }
};

},{"./../../game":33}],30:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.Screen == null) {
  Game.Screen = {};
}

Game.Screen.wearScreen = new Game.Screen.ItemListScreen({
  caption: "Choose the item you wish to wear",
  canSelect: true,
  canSelectMultipleItems: false,
  hasNoItemOption: true,
  isAcceptable: function(item) {
    return item && item.hasMixin("Equippable") && item.isWearable();
  },
  ok: function(selectedItems) {
    var item, keys;
    keys = Object.keys(selectedItems);
    if (keys.length === 0) {
      this._player.unwield();
      Game.sendMessage(this._player, "You are not wearing anthing.");
    } else {
      item = selectedItems[keys[0]];
      this._player.unequip(item);
      this._player.wear(item);
      Game.sendMessage(this._player, "You are wearing %s.", [item.describeA()]);
    }
    return true;
  }
});

},{"./../../game":33}],31:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.Screen == null) {
  Game.Screen = {};
}

Game.Screen.wieldScreen = new Game.Screen.ItemListScreen({
  caption: "Choose the item you wish to wield",
  canSelect: true,
  canSelectMultipleItems: false,
  hasNoItemOption: true,
  isAcceptable: function(item) {
    return item && item.hasMixin("Equippable") && item.isWieldable();
  },
  ok: function(selectedItems) {
    var item, keys;
    keys = Object.keys(selectedItems);
    if (keys.length === 0) {
      this._player.unwield();
      Game.sendMessage(this._player, "You are empty handed.");
    } else {
      item = selectedItems[keys[0]];
      this._player.unequip(item);
      this._player.wield(item);
      Game.sendMessage(this._player, "You are wielding %s.", [item.describeA()]);
    }
    return true;
  }
});

},{"./../../game":33}],32:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.Screen == null) {
  Game.Screen = {};
}

Game.Screen.winScreen = {
  enter: function() {
    return console.log("Entered win screen.");
  },
  exit: function() {
    return console.log("Exited win screen.");
  },
  render: function(display) {
    var b, background, g, i, r, _results;
    i = 0;
    _results = [];
    while (i < 22) {
      r = Math.round(Math.random() * 255);
      g = Math.round(Math.random() * 255);
      b = Math.round(Math.random() * 255);
      background = ROT.Color.toRGB([r, g, b]);
      display.drawText(2, i + 1, "%b{" + background + "}You win!");
      _results.push(i++);
    }
    return _results;
  },
  handleInput: function(inputType, inputData) {}
};

},{"./../../game":33}],33:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

module.exports = Game = {
  _display: null,
  _currentScreen: null,
  _screenWidth: 80,
  _screenHeight: 24,
  init: function() {
    var bindEventToScreen;
    require('./game/Glyph');
    require('./game/DynamicGlyph');
    require('./game/Tile');
    require('./game/Builder');
    require('./game/Map');
    require('./game/map/Cave');
    require('./game/map/BossCavern');
    require('./game/screen/ItemListScreen');
    require('./game/screen/TargetBasedScreen');
    require('./game/Entity');
    require('./game/entity/PlayerActor');
    require('./game/entity/FungusActor');
    require('./game/entity/TaskActor');
    require('./game/entity/GiantZombieActor');
    require('./game/entity/Attacker');
    require('./game/entity/Destructible');
    require('./game/entity/MessageRecipient');
    require('./game/entity/Sight');
    require('./game/entity/InventoryHolder');
    require('./game/entity/FoodConsumer');
    require('./game/entity/CorpseDropper');
    require('./game/entity/Equipper');
    require('./game/entity/ExperienceGainer');
    require('./game/entity/RandomStatGainer');
    require('./game/entity/PlayerStatGainer');
    require('./game/Item');
    require('./game/item/Edible');
    require('./game/item/Equippable');
    require('./game/Repository');
    require('./data/screens/dropScreen');
    require('./data/screens/eatScreen');
    require('./data/screens/examineScreen');
    require('./data/screens/gainStatScreen');
    require('./data/screens/helpScreen');
    require('./data/screens/inventoryScreen');
    require('./data/screens/lookScreen');
    require('./data/screens/loseScreen');
    require('./data/screens/pickupScreen');
    require('./data/screens/playScreen');
    require('./data/screens/startScreen');
    require('./data/screens/wearScreen');
    require('./data/screens/wieldScreen');
    require('./data/screens/winScreen');
    require('./data/entities/PlayerTemplate');
    require('./data/entities/bat');
    require('./data/entities/fungus');
    require('./data/entities/giant_zombie');
    require('./data/entities/kobold');
    require('./data/entities/newt');
    require('./data/entities/slime');
    require('./data/items/apple');
    require('./data/items/melon');
    require('./data/items/pumpkin');
    require('./data/items/corpse');
    require('./data/items/rock');
    require('./data/items/dagger');
    require('./data/items/sword');
    require('./data/items/staff');
    require('./data/items/tunic');
    require('./data/items/chainmail');
    require('./data/items/platemail');
    this._display = new ROT.Display({
      width: this._screenWidth,
      height: this._screenHeight + 1
    });
    bindEventToScreen = (function(_this) {
      return function(event) {
        window.addEventListener(event, function(e) {
          if (_this._currentScreen != null) {
            _this._currentScreen.handleInput(event, e);
          }
        });
      };
    })(this);
    bindEventToScreen("keydown");
    bindEventToScreen("keypress");
  },
  getDisplay: function() {
    return this._display;
  },
  getScreenWidth: function() {
    return this._screenWidth;
  },
  getScreenHeight: function() {
    return this._screenHeight;
  },
  refresh: function() {
    this._display.clear();
    this._currentScreen.render(this._display);
  },
  switchScreen: function(screen) {
    if (this._currentScreen !== null) {
      this._currentScreen.exit();
    }
    this.getDisplay().clear();
    this._currentScreen = screen;
    if (!this._currentScreen !== null) {
      this._currentScreen.enter();
      this.refresh();
    }
  },
  merge: function(src, dest) {
    var key, result;
    result = {};
    for (key in src) {
      result[key] = src[key];
    }
    for (key in dest) {
      result[key] = dest[key];
    }
    return result;
  },
  getNeighborPositions: function(x, y) {
    var dX, dY, tiles, _i, _j;
    tiles = [];
    for (dX = _i = -1; _i < 2; dX = ++_i) {
      for (dY = _j = -1; _j < 2; dY = ++_j) {
        if (dX === 0 && dY === 0) {
          continue;
        }
        tiles.push({
          x: x + dX,
          y: y + dY
        });
      }
    }
    return tiles.randomize();
  },
  sendMessage: function(recipient, message, args) {
    if (recipient.hasMixin(Game.EntityMixins.MessageRecipient)) {
      if (args) {
        message = vsprintf(message, args);
      }
      return recipient.receiveMessage(message);
    }
  },
  sendMessageNearby: function(map, centerX, centerY, centerZ, message, args) {
    var entities, i, _results;
    if (args) {
      message = vsprintf(message, args);
    }
    entities = map.getEntitiesWithinRadius(centerX, centerY, centerZ, 5);
    i = 0;
    _results = [];
    while (i < entities.length) {
      if (entities[i].hasMixin(Game.EntityMixins.MessageRecipient)) {
        entities[i].receiveMessage(message);
      }
      _results.push(i++);
    }
    return _results;
  },
  getLine: function(startX, startY, endX, endY) {
    var dx, dy, e2, err, points, sx, sy;
    points = [];
    dx = Math.abs(endX - startX);
    dy = Math.abs(endY - startY);
    sx = (startX < endX ? 1 : -1);
    sy = (startY < endY ? 1 : -1);
    err = dx - dy;
    e2 = void 0;
    while (true) {
      points.push({
        x: startX,
        y: startY
      });
      if (startX === endX && startY === endY) {
        break;
      }
      e2 = err * 2;
      if (e2 > -dx) {
        err -= dy;
        startX += sx;
      }
      if (e2 < dx) {
        err += dx;
        startY += sy;
      }
    }
    return points;
  }
};

},{"./data/entities/PlayerTemplate":1,"./data/entities/bat":2,"./data/entities/fungus":3,"./data/entities/giant_zombie":4,"./data/entities/kobold":5,"./data/entities/newt":6,"./data/entities/slime":7,"./data/items/apple":8,"./data/items/chainmail":9,"./data/items/corpse":10,"./data/items/dagger":11,"./data/items/melon":12,"./data/items/platemail":13,"./data/items/pumpkin":14,"./data/items/rock":15,"./data/items/staff":16,"./data/items/sword":17,"./data/items/tunic":18,"./data/screens/dropScreen":19,"./data/screens/eatScreen":20,"./data/screens/examineScreen":21,"./data/screens/gainStatScreen":22,"./data/screens/helpScreen":23,"./data/screens/inventoryScreen":24,"./data/screens/lookScreen":25,"./data/screens/loseScreen":26,"./data/screens/pickupScreen":27,"./data/screens/playScreen":28,"./data/screens/startScreen":29,"./data/screens/wearScreen":30,"./data/screens/wieldScreen":31,"./data/screens/winScreen":32,"./game/Builder":34,"./game/DynamicGlyph":35,"./game/Entity":36,"./game/Glyph":37,"./game/Item":38,"./game/Map":39,"./game/Repository":40,"./game/Tile":41,"./game/entity/Attacker":42,"./game/entity/CorpseDropper":43,"./game/entity/Destructible":44,"./game/entity/Equipper":45,"./game/entity/ExperienceGainer":46,"./game/entity/FoodConsumer":47,"./game/entity/FungusActor":48,"./game/entity/GiantZombieActor":49,"./game/entity/InventoryHolder":50,"./game/entity/MessageRecipient":51,"./game/entity/PlayerActor":52,"./game/entity/PlayerStatGainer":53,"./game/entity/RandomStatGainer":54,"./game/entity/Sight":55,"./game/entity/TaskActor":56,"./game/item/Edible":57,"./game/item/Equippable":58,"./game/map/BossCavern":59,"./game/map/Cave":60,"./game/screen/ItemListScreen":61,"./game/screen/TargetBasedScreen":62}],34:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../game');

Game.Builder = (function() {
  function Builder(width, height, depth) {
    var x, y, z;
    this._width = width;
    this._height = height;
    this._depth = depth;
    this._tiles = new Array(depth);
    this._regions = new Array(depth);
    z = 0;
    while (z < depth) {
      this._tiles[z] = this._generateLevel();
      this._regions[z] = new Array(width);
      x = 0;
      while (x < width) {
        this._regions[z][x] = new Array(height);
        y = 0;
        while (y < height) {
          this._regions[z][x][y] = 0;
          y++;
        }
        x++;
      }
      z++;
    }
    z = 0;
    while (z < this._depth) {
      this._setupRegions(z);
      z++;
    }
    this._connectAllRegions();
    return;
  }

  Builder.prototype.getTiles = function() {
    return this._tiles;
  };

  Builder.prototype.getDepth = function() {
    return this._depth;
  };

  Builder.prototype.getWidth = function() {
    return this._width;
  };

  Builder.prototype.getHeight = function() {
    return this._height;
  };

  Builder.prototype._generateLevel = function() {
    var generator, i, map, totalIterations, w;
    map = new Array(this._width);
    w = 0;
    while (w < this._width) {
      map[w] = new Array(this._height);
      w++;
    }
    generator = new ROT.Map.Cellular(this._width, this._height);
    generator.randomize(0.5);
    totalIterations = 3;
    i = 0;
    while (i < totalIterations - 1) {
      generator.create();
      i++;
    }
    generator.create(function(x, y, v) {
      if (v === 1) {
        return map[x][y] = Game.Tile.floorTile;
      } else {
        return map[x][y] = Game.Tile.wallTile;
      }
    });
    return map;
  };

  Builder.prototype._canFillRegion = function(x, y, z) {
    if (x < 0 || y < 0 || z < 0 || x >= this._width || y >= this._height || z >= this._depth) {
      return false;
    }
    if (this._regions[z][x][y] !== 0) {
      return false;
    }
    return this._tiles[z][x][y].isWalkable();
  };

  Builder.prototype._fillRegion = function(region, x, y, z) {
    var neighbors, tile, tiles, tilesFilled;
    tilesFilled = 1;
    tiles = [
      {
        x: x,
        y: y
      }
    ];
    tile = void 0;
    neighbors = void 0;
    this._regions[z][x][y] = region;
    while (tiles.length > 0) {
      tile = tiles.pop();
      neighbors = Game.getNeighborPositions(tile.x, tile.y);
      while (neighbors.length > 0) {
        tile = neighbors.pop();
        if (this._canFillRegion(tile.x, tile.y, z)) {
          this._regions[z][tile.x][tile.y] = region;
          tiles.push(tile);
          tilesFilled++;
        }
      }
    }
    return tilesFilled;
  };

  Builder.prototype._removeRegion = function(region, z) {
    var x, y;
    x = 0;
    while (x < this._width) {
      y = 0;
      while (y < this._height) {
        if (this._regions[z][x][y] === region) {
          this._regions[z][x][y] = 0;
          this._tiles[z][x][y] = Game.Tile.wallTile;
        }
        y++;
      }
      x++;
    }
  };

  Builder.prototype._setupRegions = function(z) {
    var region, tilesFilled, x, y;
    region = 1;
    tilesFilled = void 0;
    x = 0;
    while (x < this._width) {
      y = 0;
      while (y < this._height) {
        if (this._canFillRegion(x, y, z)) {
          tilesFilled = this._fillRegion(region, x, y, z);
          if (tilesFilled <= 20) {
            this._removeRegion(region, z);
          } else {
            region++;
          }
        }
        y++;
      }
      x++;
    }
  };

  Builder.prototype._findRegionOverlaps = function(z, r1, r2) {
    var matches, x, y;
    matches = [];
    x = 0;
    while (x < this._width) {
      y = 0;
      while (y < this._height) {
        if (this._tiles[z][x][y] === Game.Tile.floorTile && this._tiles[z + 1][x][y] === Game.Tile.floorTile && this._regions[z][x][y] === r1 && this._regions[z + 1][x][y] === r2) {
          matches.push({
            x: x,
            y: y
          });
        }
        y++;
      }
      x++;
    }
    return matches.randomize();
  };

  Builder.prototype._connectRegions = function(z, r1, r2) {
    var overlap, point;
    overlap = this._findRegionOverlaps(z, r1, r2);
    if (overlap.length === 0) {
      return false;
    }
    point = overlap[0];
    this._tiles[z][point.x][point.y] = Game.Tile.stairsDownTile;
    this._tiles[z + 1][point.x][point.y] = Game.Tile.stairsUpTile;
    return true;
  };

  Builder.prototype._connectAllRegions = function() {
    var connected, key, x, y, z;
    z = 0;
    while (z < this._depth - 1) {
      connected = {};
      key = void 0;
      x = 0;
      while (x < this._width) {
        y = 0;
        while (y < this._height) {
          key = this._regions[z][x][y] + "," + this._regions[z + 1][x][y];
          if (this._tiles[z][x][y] === Game.Tile.floorTile && this._tiles[z + 1][x][y] === Game.Tile.floorTile && !connected[key]) {
            this._connectRegions(z, this._regions[z][x][y], this._regions[z + 1][x][y]);
            connected[key] = true;
          }
          y++;
        }
        x++;
      }
      z++;
    }
  };

  return Builder;

})();

},{"./../game":33}],35:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Game = require('./../game');

Game.DynamicGlyph = (function(_super) {
  __extends(DynamicGlyph, _super);

  function DynamicGlyph(properties) {
    var i, key, mixins;
    properties = properties || {};
    DynamicGlyph.__super__.constructor.call(this, properties);
    this._name = properties["name"] || "";
    this._attachedMixins = {};
    this._attachedMixinGroups = {};
    this._listeners = {};
    mixins = properties["mixins"] || [];
    i = 0;
    while (i < mixins.length) {
      for (key in mixins[i]) {
        if (key !== "init" && key !== "name" && key !== "listeners" && !this.hasOwnProperty(key)) {
          this[key] = mixins[i][key];
        }
      }
      this._attachedMixins[mixins[i].name] = true;
      if (mixins[i].groupName) {
        this._attachedMixinGroups[mixins[i].groupName] = true;
      }
      if (mixins[i].listeners) {
        for (key in mixins[i].listeners) {
          if (!this._listeners[key]) {
            this._listeners[key] = [];
          }
          this._listeners[key].push(mixins[i].listeners[key]);
        }
      }
      if (mixins[i].init) {
        mixins[i].init.call(this, properties);
      }
      i++;
    }
    return;
  }

  DynamicGlyph.prototype.hasMixin = function(obj) {
    if (typeof obj === "object") {
      return this._attachedMixins[obj.name];
    } else {
      return this._attachedMixins[obj] || this._attachedMixinGroups[obj];
    }
  };

  DynamicGlyph.prototype.setName = function(name) {
    return this._name = name;
  };

  DynamicGlyph.prototype.getName = function() {
    return this._name;
  };

  DynamicGlyph.prototype.describe = function() {
    return this._name;
  };

  DynamicGlyph.prototype.describeA = function(capitalize) {
    var firstLetter, prefix, prefixes, string;
    prefixes = (capitalize ? ["A", "An"] : ["a", "an"]);
    string = this.describe();
    firstLetter = string.charAt(0).toLowerCase();
    prefix = ("aeiou".indexOf(firstLetter) >= 0 ? 1 : 0);
    return prefixes[prefix] + " " + string;
  };

  DynamicGlyph.prototype.describeThe = function(capitalize) {
    var prefix;
    prefix = (capitalize ? "The" : "the");
    return prefix + " " + this.describe();
  };

  DynamicGlyph.prototype.raiseEvent = function(event) {
    var args, i, results;
    if (!this._listeners[event]) {
      return;
    }
    args = Array.prototype.slice.call(arguments, 1);
    results = [];
    i = 0;
    while (i < this._listeners[event].length) {
      results.push(this._listeners[event][i].apply(this, args));
      i++;
    }
    return results;
  };

  DynamicGlyph.prototype.details = function() {
    var detailGroups, details, i, j, l;
    details = [];
    detailGroups = this.raiseEvent("details");
    if (detailGroups) {
      i = 0;
      l = detailGroups.length;
      while (i < l) {
        if (detailGroups[i]) {
          j = 0;
          while (j < detailGroups[i].length) {
            details.push(detailGroups[i][j].key + ": " + detailGroups[i][j].value);
            j++;
          }
        }
        i++;
      }
    }
    return details.join(", ");
  };

  return DynamicGlyph;

})(Game.Glyph);

},{"./../game":33}],36:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Game = require('./../game');

Game.Entity = (function(_super) {
  __extends(Entity, _super);

  function Entity(properties) {
    properties = properties || {};
    Entity.__super__.constructor.call(this, properties);
    this._x = properties["x"] || 0;
    this._y = properties["y"] || 0;
    this._z = properties["z"] || 0;
    this._map = null;
    this._alive = true;
    this._speed = properties["speed"] || 1000;
    return;
  }

  Entity.prototype.setX = function(x) {
    this._x = x;
  };

  Entity.prototype.setY = function(y) {
    this._y = y;
  };

  Entity.prototype.setZ = function(z) {
    this._z = z;
  };

  Entity.prototype.setMap = function(map) {
    this._map = map;
  };

  Entity.prototype.setSpeed = function(speed) {
    this._speed = speed;
  };

  Entity.prototype.setPosition = function(x, y, z) {
    var oldX, oldY, oldZ;
    oldX = this._x;
    oldY = this._y;
    oldZ = this._z;
    this._x = x;
    this._y = y;
    this._z = z;
    if (this._map) {
      this._map.updateEntityPosition(this, oldX, oldY, oldZ);
    }
  };

  Entity.prototype.getX = function() {
    return this._x;
  };

  Entity.prototype.getY = function() {
    return this._y;
  };

  Entity.prototype.getZ = function() {
    return this._z;
  };

  Entity.prototype.getMap = function() {
    return this._map;
  };

  Entity.prototype.getSpeed = function() {
    return this._speed;
  };

  Entity.prototype.tryMove = function(x, y, z, map) {
    var items, target, tile;
    map = this.getMap();
    tile = map.getTile(x, y, this.getZ());
    target = map.getEntityAt(x, y, this.getZ());
    if (z < this.getZ()) {
      if (tile !== Game.Tile.stairsUpTile) {
        Game.sendMessage(this, "You can't go up here!");
      } else {
        Game.sendMessage(this, "You ascend to level %d!", [z + 1]);
        this.setPosition(x, y, z);
      }
    } else if (z > this.getZ()) {
      if (tile === Game.Tile.holeToCavernTile && this.hasMixin(Game.EntityMixins.PlayerActor)) {
        this.switchMap(new Game.Map.BossCavern());
      } else if (tile !== Game.Tile.stairsDownTile) {
        Game.sendMessage(this, "You can't go down here!");
      } else {
        this.setPosition(x, y, z);
        Game.sendMessage(this, "You descend to level %d!", [z + 1]);
      }
    } else if (target) {
      if (this.hasMixin("Attacker") && (this.hasMixin(Game.EntityMixins.PlayerActor) || target.hasMixin(Game.EntityMixins.PlayerActor))) {
        this.attack(target);
        return true;
      }
      return false;
    } else if (tile.isWalkable()) {
      this.setPosition(x, y, z);
      items = this.getMap().getItemsAt(x, y, z);
      if (items) {
        if (items.length === 1) {
          Game.sendMessage(this, "You see %s.", [items[0].describeA()]);
        } else {
          Game.sendMessage(this, "There are several objects here.");
        }
      }
      return true;
    } else if (tile.isDiggable()) {
      if (this.hasMixin(Game.EntityMixins.PlayerActor)) {
        map.dig(x, y, z);
        return true;
      }
      return false;
    }
    return false;
  };

  Entity.prototype.isAlive = function() {
    return this._alive;
  };

  Entity.prototype.kill = function(message) {
    if (!this._alive) {
      return;
    }
    this._alive = false;
    if (message) {
      Game.sendMessage(this, message);
    } else {
      Game.sendMessage(this, "You have died!");
    }
    if (this.hasMixin(Game.EntityMixins.PlayerActor)) {
      this.act();
    } else {
      this.getMap().removeEntity(this);
    }
  };

  Entity.prototype.switchMap = function(newMap) {
    if (newMap === this.getMap()) {
      return;
    }
    this.getMap().removeEntity(this);
    this._x = 0;
    this._y = 0;
    this._z = 0;
    newMap.addEntity(this);
  };

  return Entity;

})(Game.DynamicGlyph);

Game.EntityMixins = {};

},{"./../game":33}],37:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../game');

Game.Glyph = (function() {
  function Glyph(properties) {
    properties = properties || {};
    this._char = properties["character"] || " ";
    this._foreground = properties["foreground"] || "white";
    this._background = properties["background"] || "black";
  }

  Glyph.prototype.getChar = function() {
    return this._char;
  };

  Glyph.prototype.getBackground = function() {
    return this._background;
  };

  Glyph.prototype.getForeground = function() {
    return this._foreground;
  };

  Glyph.prototype.getRepresentation = function() {
    return "%c{" + this._foreground + "}%b{" + this._background + "}" + this._char + "%c{white}%b{black}";
  };

  return Glyph;

})();

},{"./../game":33}],38:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Game = require('./../game');

Game.Item = (function(_super) {
  __extends(Item, _super);

  function Item(properties) {
    properties = properties || {};
    Item.__super__.constructor.call(this, properties);
    return;
  }

  return Item;

})(Game.DynamicGlyph);

Game.ItemMixins = {};

},{"./../game":33}],39:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../game');

Game.Map = (function() {
  function Map(tiles) {
    this._tiles = tiles;
    this._depth = tiles.length;
    this._width = tiles[0].length;
    this._height = tiles[0][0].length;
    this._fov = [];
    this.setupFov();
    this._entities = {};
    this._items = {};
    this._scheduler = new ROT.Scheduler.Speed();
    this._engine = new ROT.Engine(this._scheduler);
    this._explored = new Array(this._depth);
    this._setupExploredArray();
    return;
  }

  Map.prototype._setupExploredArray = function() {
    var x, y, z;
    z = 0;
    while (z < this._depth) {
      this._explored[z] = new Array(this._width);
      x = 0;
      while (x < this._width) {
        this._explored[z][x] = new Array(this._height);
        y = 0;
        while (y < this._height) {
          this._explored[z][x][y] = false;
          y++;
        }
        x++;
      }
      z++;
    }
  };

  Map.prototype.getDepth = function() {
    return this._depth;
  };

  Map.prototype.getWidth = function() {
    return this._width;
  };

  Map.prototype.getHeight = function() {
    return this._height;
  };

  Map.prototype.getTile = function(x, y, z) {
    if (x < 0 || x >= this._width || y < 0 || y >= this._height || z < 0 || z >= this._depth) {
      return Game.Tile.nullTile;
    } else {
      return this._tiles[z][x][y] || Game.Tile.nullTile;
    }
  };

  Map.prototype.dig = function(x, y, z) {
    if (this.getTile(x, y, z).isDiggable()) {
      this._tiles[z][x][y] = Game.Tile.floorTile;
    }
  };

  Map.prototype.isEmptyFloor = function(x, y, z) {
    return this.getTile(x, y, z) === Game.Tile.floorTile && !this.getEntityAt(x, y, z);
  };

  Map.prototype.setExplored = function(x, y, z, state) {
    if (this.getTile(x, y, z) !== Game.Tile.nullTile) {
      this._explored[z][x][y] = state;
    }
  };

  Map.prototype.isExplored = function(x, y, z) {
    if (this.getTile(x, y, z) !== Game.Tile.nullTile) {
      return this._explored[z][x][y];
    } else {
      return false;
    }
  };

  Map.prototype.setupFov = function() {
    var map, z;
    map = this;
    z = 0;
    while (z < this._depth) {
      (function() {
        var depth;
        depth = z;
        return map._fov.push(new ROT.FOV.DiscreteShadowcasting(function(x, y) {
          return !map.getTile(x, y, depth).isBlockingLight();
        }, {
          topology: 4
        }));
      })();
      z++;
    }
  };

  Map.prototype.getFov = function(depth) {
    return this._fov[depth];
  };

  Map.prototype.getEngine = function() {
    return this._engine;
  };

  Map.prototype.getEntities = function() {
    return this._entities;
  };

  Map.prototype.getEntityAt = function(x, y, z) {
    return this._entities[x + "," + y + "," + z];
  };

  Map.prototype.getEntitiesWithinRadius = function(centerX, centerY, centerZ, radius) {
    var bottomY, entity, key, leftX, results, rightX, topY;
    results = [];
    leftX = centerX - radius;
    rightX = centerX + radius;
    topY = centerY - radius;
    bottomY = centerY + radius;
    for (key in this._entities) {
      entity = this._entities[key];
      if (entity.getX() >= leftX && entity.getX() <= rightX && entity.getY() >= topY && entity.getY() <= bottomY && entity.getZ() === centerZ) {
        results.push(entity);
      }
    }
    return results;
  };

  Map.prototype.getRandomFloorPosition = function(z) {
    var x, y;
    x = void 0;
    y = void 0;
    while (true) {
      x = Math.floor(Math.random() * this._width);
      y = Math.floor(Math.random() * this._height);
      if (!!this.isEmptyFloor(x, y, z)) {
        break;
      }
    }
    return {
      x: x,
      y: y,
      z: z
    };
  };

  Map.prototype.addEntityAtRandomPosition = function(entity, z) {
    var position;
    position = this.getRandomFloorPosition(z);
    entity.setX(position.x);
    entity.setY(position.y);
    entity.setZ(position.z);
    this.addEntity(entity);
  };

  Map.prototype.addEntity = function(entity) {
    entity.setMap(this);
    this.updateEntityPosition(entity);
    if (entity.hasMixin("Actor")) {
      this._scheduler.add(entity, true);
    }
    if (entity.hasMixin(Game.EntityMixins.PlayerActor)) {
      this._player = entity;
    }
  };

  Map.prototype.removeEntity = function(entity) {
    var key;
    key = entity.getX() + "," + entity.getY() + "," + entity.getZ();
    if (this._entities[key] === entity) {
      delete this._entities[key];
    }
    if (entity.hasMixin("Actor")) {
      this._scheduler.remove(entity);
    }
    if (entity.hasMixin(Game.EntityMixins.PlayerActor)) {
      this._player = undefined;
    }
  };

  Map.prototype.updateEntityPosition = function(entity, oldX, oldY, oldZ) {
    var key, oldKey;
    if (typeof oldX === "number") {
      oldKey = oldX + "," + oldY + "," + oldZ;
      if (this._entities[oldKey] === entity) {
        delete this._entities[oldKey];
      }
    }
    if (entity.getX() < 0 || entity.getX() >= this._width || entity.getY() < 0 || entity.getY() >= this._height || entity.getZ() < 0 || entity.getZ() >= this._depth) {
      throw new Error("Entity's position is out of bounds.");
    }
    key = entity.getX() + "," + entity.getY() + "," + entity.getZ();
    if (this._entities[key]) {
      throw new Error("Tried to add an entity at an occupied position.");
    }
    this._entities[key] = entity;
  };

  Map.prototype.getItemsAt = function(x, y, z) {
    return this._items[x + "," + y + "," + z];
  };

  Map.prototype.setItemsAt = function(x, y, z, items) {
    var key;
    key = x + "," + y + "," + z;
    if (items.length === 0) {
      if (this._items[key]) {
        delete this._items[key];
      }
    } else {
      this._items[key] = items;
    }
  };

  Map.prototype.addItem = function(x, y, z, item) {
    var key;
    key = x + "," + y + "," + z;
    if (this._items[key]) {
      this._items[key].push(item);
    } else {
      this._items[key] = [item];
    }
  };

  Map.prototype.addItemAtRandomPosition = function(item, z) {
    var position;
    position = this.getRandomFloorPosition(z);
    this.addItem(position.x, position.y, position.z, item);
  };

  Map.prototype.getPlayer = function() {
    return this._player;
  };

  return Map;

})();

},{"./../game":33}],40:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../game');

Game.Repository = (function() {
  function Repository(name, ctor) {
    this._name = name;
    this._templates = {};
    this._ctor = ctor;
    this._randomTemplates = {};
    return;
  }

  Repository.prototype.define = function(name, template, options) {
    var disableRandomCreation;
    this._templates[name] = template;
    disableRandomCreation = options && options["disableRandomCreation"];
    if (!disableRandomCreation) {
      this._randomTemplates[name] = template;
    }
  };

  Repository.prototype.create = function(name, extraProperties) {
    var key, template;
    if (!this._templates[name]) {
      throw new Error("No template named '" + name + "' in repository '" + this._name + "'");
    }
    template = Object.create(this._templates[name]);
    if (extraProperties) {
      for (key in extraProperties) {
        template[key] = extraProperties[key];
      }
    }
    return new this._ctor(template);
  };

  Repository.prototype.createRandom = function() {
    return this.create(Object.keys(this._randomTemplates).random());
  };

  return Repository;

})();

},{"./../game":33}],41:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Game = require('./../game');

Game.Tile = (function(_super) {
  __extends(Tile, _super);

  function Tile(properties) {
    properties = properties || {};
    Tile.__super__.constructor.call(this, properties);
    this._walkable = properties["walkable"] || false;
    this._diggable = properties["diggable"] || false;
    this._blocksLight = (properties["blocksLight"] !== undefined ? properties["blocksLight"] : true);
    this._description = properties["description"] || "";
  }

  Tile.prototype.isWalkable = function() {
    return this._walkable;
  };

  Tile.prototype.isDiggable = function() {
    return this._diggable;
  };

  Tile.prototype.isBlockingLight = function() {
    return this._blocksLight;
  };

  Tile.prototype.getDescription = function() {
    return this._description;
  };

  Tile.nullTile = new Tile({
    description: "(unknown)"
  });

  Tile.floorTile = new Tile({
    character: ".",
    walkable: true,
    blocksLight: false,
    description: "A cave floor"
  });

  Tile.wallTile = new Tile({
    character: "#",
    foreground: "goldenrod",
    diggable: true,
    description: "A cave wall"
  });

  Tile.stairsUpTile = new Tile({
    character: "<",
    foreground: "white",
    walkable: true,
    blocksLight: false,
    description: "A rock staircase leading upwards"
  });

  Tile.stairsDownTile = new Tile({
    character: ">",
    foreground: "white",
    walkable: true,
    blocksLight: false,
    description: "A rock staircase leading downwards"
  });

  Tile.holeToCavernTile = new Tile({
    character: "O",
    foreground: "white",
    walkable: true,
    blocksLight: false,
    description: "A great dark hole in the ground"
  });

  Tile.waterTile = new Tile({
    character: "~",
    foreground: "blue",
    walkable: false,
    blocksLight: false,
    description: "Murky blue water"
  });

  return Tile;

})(Game.Glyph);

},{"./../game":33}],42:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.EntityMixins.Attacker = {
  name: "Attacker",
  groupName: "Attacker",
  init: function(template) {
    return this._attackValue = template["attackValue"] || 1;
  },
  getAttackValue: function() {
    var modifier;
    modifier = 0;
    if (this.hasMixin(Game.EntityMixins.Equipper)) {
      if (this.getWeapon()) {
        modifier += this.getWeapon().getAttackValue();
      }
      if (this.getArmor()) {
        modifier += this.getArmor().getAttackValue();
      }
    }
    return this._attackValue + modifier;
  },
  increaseAttackValue: function(value) {
    value = value || 2;
    this._attackValue += value;
    return Game.sendMessage(this, "You look stronger!");
  },
  attack: function(target) {
    var attack, damage, defense, max;
    if (target.hasMixin("Destructible")) {
      attack = this.getAttackValue();
      defense = target.getDefenseValue();
      max = Math.max(0, attack - defense);
      damage = 1 + Math.floor(Math.random() * max);
      Game.sendMessage(this, "You strike the %s for %d damage!", [target.getName(), damage]);
      Game.sendMessage(target, "The %s strikes you for %d damage!", [this.getName(), damage]);
      return target.takeDamage(this, damage);
    }
  },
  listeners: {
    details: function() {
      return [
        {
          key: "attack",
          value: this.getAttackValue()
        }
      ];
    }
  }
};

},{"./../../game":33}],43:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.EntityMixins.CorpseDropper = {
  name: "CorpseDropper",
  init: function(template) {
    return this._corpseDropRate = template["corpseDropRate"] || 100;
  },
  listeners: {
    onDeath: function(attacker) {
      if (Math.round(Math.random() * 100) <= this._corpseDropRate) {
        return this._map.addItem(this.getX(), this.getY(), this.getZ(), Game.ItemRepository.create("corpse", {
          name: this._name + " corpse",
          foreground: this._foreground
        }));
      }
    }
  }
};

},{"./../../game":33}],44:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.EntityMixins.Destructible = {
  name: "Destructible",
  init: function(template) {
    this._maxHp = template["maxHp"] || 10;
    this._hp = template["hp"] || this._maxHp;
    return this._defenseValue = template["defenseValue"] || 0;
  },
  getDefenseValue: function() {
    var modifier;
    modifier = 0;
    if (this.hasMixin(Game.EntityMixins.Equipper)) {
      if (this.getWeapon()) {
        modifier += this.getWeapon().getDefenseValue();
      }
      if (this.getArmor()) {
        modifier += this.getArmor().getDefenseValue();
      }
    }
    return this._defenseValue + modifier;
  },
  getHp: function() {
    return this._hp;
  },
  getMaxHp: function() {
    return this._maxHp;
  },
  setHp: function(hp) {
    return this._hp = hp;
  },
  increaseDefenseValue: function(value) {
    value = value || 2;
    this._defenseValue += value;
    return Game.sendMessage(this, "You look tougher!");
  },
  increaseMaxHp: function(value) {
    value = value || 10;
    this._maxHp += value;
    this._hp += value;
    return Game.sendMessage(this, "You look healthier!");
  },
  takeDamage: function(attacker, damage) {
    this._hp -= damage;
    if (this._hp <= 0) {
      Game.sendMessage(attacker, "You kill the %s!", [this.getName()]);
      this.raiseEvent("onDeath", attacker);
      attacker.raiseEvent("onKill", this);
      return this.kill();
    }
  },
  listeners: {
    onGainLevel: function() {
      return this.setHp(this.getMaxHp());
    },
    details: function() {
      return [
        {
          key: "defense",
          value: this.getDefenseValue()
        }, {
          key: "hp",
          value: this.getHp()
        }
      ];
    }
  }
};

},{"./../../game":33}],45:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.EntityMixins.Equipper = {
  name: "Equipper",
  init: function(template) {
    this._weapon = null;
    return this._armor = null;
  },
  wield: function(item) {
    return this._weapon = item;
  },
  unwield: function() {
    return this._weapon = null;
  },
  wear: function(item) {
    return this._armor = item;
  },
  takeOff: function() {
    return this._armor = null;
  },
  getWeapon: function() {
    return this._weapon;
  },
  getArmor: function() {
    return this._armor;
  },
  unequip: function(item) {
    if (this._weapon === item) {
      this.unwield();
    }
    if (this._armor === item) {
      return this.takeOff();
    }
  }
};

},{"./../../game":33}],46:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.EntityMixins.ExperienceGainer = {
  name: "ExperienceGainer",
  init: function(template) {
    this._level = template["level"] || 1;
    this._experience = template["experience"] || 0;
    this._statPointsPerLevel = template["statPointsPerLevel"] || 1;
    this._statPoints = 0;
    this._statOptions = [];
    if (this.hasMixin("Attacker")) {
      this._statOptions.push(["Increase attack value", this.increaseAttackValue]);
    }
    if (this.hasMixin("Destructible")) {
      this._statOptions.push(["Increase defense value", this.increaseDefenseValue]);
      this._statOptions.push(["Increase max health", this.increaseMaxHp]);
    }
    if (this.hasMixin("Sight")) {
      return this._statOptions.push(["Increase sight range", this.increaseSightRadius]);
    }
  },
  getLevel: function() {
    return this._level;
  },
  getExperience: function() {
    return this._experience;
  },
  getNextLevelExperience: function() {
    return (this._level * this._level) * 10;
  },
  getStatPoints: function() {
    return this._statPoints;
  },
  setStatPoints: function(statPoints) {
    return this._statPoints = statPoints;
  },
  getStatOptions: function() {
    return this._statOptions;
  },
  giveExperience: function(points) {
    var levelsGained, statPointsGained, usedPoints;
    statPointsGained = 0;
    levelsGained = 0;
    while (points > 0) {
      if (this._experience + points >= this.getNextLevelExperience()) {
        usedPoints = this.getNextLevelExperience() - this._experience;
        points -= usedPoints;
        this._experience += usedPoints;
        this._level++;
        levelsGained++;
        this._statPoints += this._statPointsPerLevel;
        statPointsGained += this._statPointsPerLevel;
      } else {
        this._experience += points;
        points = 0;
      }
    }
    if (levelsGained > 0) {
      Game.sendMessage(this, "You advance to level %d.", [this._level]);
      return this.raiseEvent("onGainLevel");
    }
  },
  listeners: {
    onKill: function(victim) {
      var exp;
      exp = victim.getMaxHp() + victim.getDefenseValue();
      if (victim.hasMixin("Attacker")) {
        exp += victim.getAttackValue();
      }
      if (victim.hasMixin("ExperienceGainer")) {
        exp -= (this.getLevel() - victim.getLevel()) * 3;
      }
      if (exp > 0) {
        return this.giveExperience(exp);
      }
    },
    details: function() {
      return [
        {
          key: "level",
          value: this.getLevel()
        }
      ];
    }
  }
};

},{"./../../game":33}],47:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.EntityMixins.FoodConsumer = {
  name: "FoodConsumer",
  init: function(template) {
    this._maxFullness = template["maxFullness"] || 1000;
    this._fullness = template["fullness"] || (this._maxFullness / 2);
    return this._fullnessDepletionRate = template["fullnessDepletionRate"] || 1;
  },
  addTurnHunger: function() {
    return this.modifyFullnessBy(-this._fullnessDepletionRate);
  },
  modifyFullnessBy: function(points) {
    this._fullness = this._fullness + points;
    if (this._fullness <= 0) {
      return this.kill("You have died of starvation!");
    } else {
      if (this._fullness > this._maxFullness) {
        return this.kill("You choke and die!");
      }
    }
  },
  getHungerState: function() {
    var perPercent;
    perPercent = this._maxFullness / 100;
    if (this._fullness <= perPercent * 5) {
      return "Starving";
    } else if (this._fullness <= perPercent * 25) {
      return "Hungry";
    } else if (this._fullness >= perPercent * 95) {
      return "Oversatiated";
    } else if (this._fullness >= perPercent * 75) {
      return "Full";
    } else {
      return "Not Hungry";
    }
  }
};

},{"./../../game":33}],48:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.EntityMixins.FungusActor = {
  name: "FungusActor",
  groupName: "Actor",
  init: function() {
    return this._growthsRemaining = 5;
  },
  act: function() {
    var entity, xOffset, yOffset;
    if (this._growthsRemaining > 0) {
      if (Math.random() <= 0.02) {
        xOffset = Math.floor(Math.random() * 3) - 1;
        yOffset = Math.floor(Math.random() * 3) - 1;
        if (xOffset !== 0 || yOffset !== 0) {
          if (this.getMap().isEmptyFloor(this.getX() + xOffset, this.getY() + yOffset, this.getZ())) {
            entity = Game.EntityRepository.create("fungus");
            entity.setPosition(this.getX() + xOffset, this.getY() + yOffset, this.getZ());
            this.getMap().addEntity(entity);
            this._growthsRemaining--;
            return Game.sendMessageNearby(this.getMap(), entity.getX(), entity.getY(), entity.getZ(), "The fungus is spreading!");
          }
        }
      }
    }
  }
};

},{"./../../game":33}],49:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.EntityMixins.GiantZombieActor = Game.merge(Game.EntityMixins.TaskActor, {
  init: function(template) {
    Game.EntityMixins.TaskActor.init.call(this, Game.merge(template, {
      tasks: ["growArm", "spawnSlime", "hunt", "wander"]
    }));
    return this._hasGrownArm = false;
  },
  canDoTask: function(task) {
    if (task === "growArm") {
      return this.getHp() <= 20 && !this._hasGrownArm;
    } else if (task === "spawnSlime") {
      return Math.round(Math.random() * 100) <= 10;
    } else {
      return Game.EntityMixins.TaskActor.canDoTask.call(this, task);
    }
  },
  growArm: function() {
    this._hasGrownArm = true;
    this.increaseAttackValue(5);
    return Game.sendMessageNearby(this.getMap(), this.getX(), this.getY(), this.getZ(), "An extra arm appears on the giant zombie!");
  },
  spawnSlime: function() {
    var slime, xOffset, yOffset;
    xOffset = Math.floor(Math.random() * 3) - 1;
    yOffset = Math.floor(Math.random() * 3) - 1;
    if (!this.getMap().isEmptyFloor(this.getX() + xOffset, this.getY() + yOffset, this.getZ())) {
      return;
    }
    slime = Game.EntityRepository.create("slime");
    slime.setX(this.getX() + xOffset);
    slime.setY(this.getY() + yOffset);
    slime.setZ(this.getZ());
    return this.getMap().addEntity(slime);
  },
  listeners: {
    onDeath: function(attacker) {
      return Game.switchScreen(Game.Screen.winScreen);
    }
  }
});

},{"./../../game":33}],50:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.EntityMixins.InventoryHolder = {
  name: "InventoryHolder",
  init: function(template) {
    var inventorySlots;
    inventorySlots = template["inventorySlots"] || 10;
    return this._items = new Array(inventorySlots);
  },
  getItems: function() {
    return this._items;
  },
  getItem: function(i) {
    return this._items[i];
  },
  addItem: function(item) {
    var i;
    i = 0;
    while (i < this._items.length) {
      if (!this._items[i]) {
        this._items[i] = item;
        return true;
      }
      i++;
    }
    return false;
  },
  removeItem: function(i) {
    if (this._items[i] && this.hasMixin(Game.EntityMixins.Equipper)) {
      this.unequip(this._items[i]);
    }
    return this._items[i] = null;
  },
  canAddItem: function() {
    var i;
    i = 0;
    while (i < this._items.length) {
      if (!this._items[i]) {
        return true;
      }
      i++;
    }
    return false;
  },
  pickupItems: function(indices) {
    var added, i, mapItems;
    mapItems = this._map.getItemsAt(this.getX(), this.getY(), this.getZ());
    added = 0;
    i = 0;
    while (i < indices.length) {
      if (this.addItem(mapItems[indices[i] - added])) {
        mapItems.splice(indices[i] - added, 1);
        added++;
      } else {
        break;
      }
      i++;
    }
    this._map.setItemsAt(this.getX(), this.getY(), this.getZ(), mapItems);
    return added === indices.length;
  },
  dropItem: function(i) {
    if (this._items[i]) {
      if (this._map) {
        this._map.addItem(this.getX(), this.getY(), this.getZ(), this._items[i]);
      }
      return this.removeItem(i);
    }
  }
};

},{"./../../game":33}],51:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.EntityMixins.MessageRecipient = {
  name: "MessageRecipient",
  init: function(template) {
    return this._messages = [];
  },
  receiveMessage: function(message) {
    return this._messages.push(message);
  },
  getMessages: function() {
    return this._messages;
  },
  clearMessages: function() {
    return this._messages = [];
  }
};

},{"./../../game":33}],52:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.EntityMixins.PlayerActor = {
  name: "PlayerActor",
  groupName: "Actor",
  act: function() {
    if (this._acting) {
      return;
    }
    this._acting = true;
    this.addTurnHunger();
    if (!this.isAlive()) {
      Game.Screen.playScreen.setGameEnded(true);
      Game.sendMessage(this, "Press [Enter] to continue!");
    }
    Game.refresh();
    this.getMap().getEngine().lock();
    this.clearMessages();
    this._acting = false;
  }
};

},{"./../../game":33}],53:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.EntityMixins.PlayerStatGainer = {
  name: "PlayerStatGainer",
  groupName: "StatGainer",
  listeners: {
    onGainLevel: function() {
      Game.Screen.gainStatScreen.setup(this);
      return Game.Screen.playScreen.setSubScreen(Game.Screen.gainStatScreen);
    }
  }
};

},{"./../../game":33}],54:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.EntityMixins.RandomStatGainer = {
  name: "RandomStatGainer",
  groupName: "StatGainer",
  listeners: {
    onGainLevel: function() {
      var statOptions, _results;
      statOptions = this.getStatOptions();
      _results = [];
      while (this.getStatPoints() > 0) {
        statOptions.random()[1].call(this);
        _results.push(this.setStatPoints(this.getStatPoints() - 1));
      }
      return _results;
    }
  }
};

},{"./../../game":33}],55:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.EntityMixins.Sight = {
  name: "Sight",
  groupName: "Sight",
  init: function(template) {
    return this._sightRadius = template["sightRadius"] || 5;
  },
  getSightRadius: function() {
    return this._sightRadius;
  },
  increaseSightRadius: function(value) {
    value = value || 1;
    this._sightRadius += value;
    return Game.sendMessage(this, "You are more aware of your surroundings!");
  },
  canSee: function(entity) {
    var found, otherX, otherY;
    if (!entity || this._map !== entity.getMap() || this._z !== entity.getZ()) {
      return false;
    }
    otherX = entity.getX();
    otherY = entity.getY();
    if ((otherX - this._x) * (otherX - this._x) + (otherY - this._y) * (otherY - this._y) > this._sightRadius * this._sightRadius) {
      return false;
    }
    found = false;
    this.getMap().getFov(this.getZ()).compute(this.getX(), this.getY(), this.getSightRadius(), function(x, y, radius, visibility) {
      if (x === otherX && y === otherY) {
        return found = true;
      }
    });
    return found;
  }
};

},{"./../../game":33}],56:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.EntityMixins.TaskActor = {
  name: "TaskActor",
  groupName: "Actor",
  init: function(template) {
    return this._tasks = template["tasks"] || ["wander"];
  },
  act: function() {
    var i;
    i = 0;
    while (i < this._tasks.length) {
      if (this.canDoTask(this._tasks[i])) {
        this[this._tasks[i]]();
        return;
      }
      i++;
    }
  },
  canDoTask: function(task) {
    if (task === "hunt") {
      return this.hasMixin("Sight") && this.canSee(this.getMap().getPlayer());
    } else if (task === "wander") {
      return true;
    } else {
      throw new Error("Tried to perform undefined task " + task);
    }
  },
  hunt: function() {
    var count, offsets, path, player, source, z;
    player = this.getMap().getPlayer();
    offsets = Math.abs(player.getX() - this.getX()) + Math.abs(player.getY() - this.getY());
    if (offsets === 1) {
      if (this.hasMixin("Attacker")) {
        this.attack(player);
        return;
      }
    }
    source = this;
    z = source.getZ();
    path = new ROT.Path.AStar(player.getX(), player.getY(), function(x, y) {
      var entity;
      entity = source.getMap().getEntityAt(x, y, z);
      if (entity && entity !== player && entity !== source) {
        return false;
      }
      return source.getMap().getTile(x, y, z).isWalkable();
    }, {
      topology: 4
    });
    count = 0;
    return path.compute(source.getX(), source.getY(), function(x, y) {
      if (count === 1) {
        source.tryMove(x, y, z);
      }
      return count++;
    });
  },
  wander: function() {
    var moveOffset;
    moveOffset = (Math.round(Math.random()) === 1 ? 1 : -1);
    if (Math.round(Math.random()) === 1) {
      return this.tryMove(this.getX() + moveOffset, this.getY(), this.getZ());
    } else {
      return this.tryMove(this.getX(), this.getY() + moveOffset, this.getZ());
    }
  }
};

},{"./../../game":33}],57:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.ItemMixins.Edible = {
  name: "Edible",
  init: function(template) {
    this._foodValue = template["foodValue"] || 5;
    this._maxConsumptions = template["consumptions"] || 1;
    return this._remainingConsumptions = this._maxConsumptions;
  },
  eat: function(entity) {
    if (entity.hasMixin("FoodConsumer")) {
      if (this.hasRemainingConsumptions()) {
        entity.modifyFullnessBy(this._foodValue);
        return this._remainingConsumptions--;
      }
    }
  },
  hasRemainingConsumptions: function() {
    return this._remainingConsumptions > 0;
  },
  describe: function() {
    if (this._maxConsumptions !== this._remainingConsumptions) {
      return "partly eaten " + Game.Item.prototype.describe.call(this);
    } else {
      return this._name;
    }
  },
  listeners: {
    details: function() {
      return [
        {
          key: "food",
          value: this._foodValue
        }
      ];
    }
  }
};

},{"./../../game":33}],58:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.ItemMixins.Equippable = {
  name: "Equippable",
  init: function(template) {
    this._attackValue = template["attackValue"] || 0;
    this._defenseValue = template["defenseValue"] || 0;
    this._wieldable = template["wieldable"] || false;
    return this._wearable = template["wearable"] || false;
  },
  getAttackValue: function() {
    return this._attackValue;
  },
  getDefenseValue: function() {
    return this._defenseValue;
  },
  isWieldable: function() {
    return this._wieldable;
  },
  isWearable: function() {
    return this._wearable;
  },
  listeners: {
    details: function() {
      var results;
      results = [];
      if (this._wieldable) {
        results.push({
          key: "attack",
          value: this.getAttackValue()
        });
      }
      if (this._wearable) {
        results.push({
          key: "defense",
          value: this.getDefenseValue()
        });
      }
      return results;
    }
  }
};

},{"./../../game":33}],59:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Game = require('./../../game');

Game.Map.BossCavern = (function(_super) {
  __extends(BossCavern, _super);

  function BossCavern() {
    BossCavern.__super__.constructor.call(this, this._generateTiles(80, 24));
    this.addEntityAtRandomPosition(Game.EntityRepository.create("giant zombie"), 0);
    return;
  }

  BossCavern.prototype._fillCircle = function(tiles, centerX, centerY, radius, tile) {
    var i, radiusError, x, xChange, y, yChange;
    x = radius;
    y = 0;
    xChange = 1 - (radius << 1);
    yChange = 0;
    radiusError = 0;
    while (x >= y) {
      i = centerX - x;
      while (i <= centerX + x) {
        tiles[i][centerY + y] = tile;
        tiles[i][centerY - y] = tile;
        i++;
      }
      i = centerX - y;
      while (i <= centerX + y) {
        tiles[i][centerY + x] = tile;
        tiles[i][centerY - x] = tile;
        i++;
      }
      y++;
      radiusError += yChange;
      yChange += 2;
      if (((radiusError << 1) + xChange) > 0) {
        x--;
        radiusError += xChange;
        xChange += 2;
      }
    }
  };

  BossCavern.prototype._generateTiles = function(width, height) {
    var centerX, centerY, i, lakes, maxRadius, radius, tiles, x, y;
    tiles = new Array(width);
    x = 0;
    while (x < width) {
      tiles[x] = new Array(height);
      y = 0;
      while (y < height) {
        tiles[x][y] = Game.Tile.wallTile;
        y++;
      }
      x++;
    }
    radius = (Math.min(width, height) - 2) / 2;
    this._fillCircle(tiles, width / 2, height / 2, radius, Game.Tile.floorTile);
    lakes = Math.round(Math.random() * 3) + 3;
    maxRadius = 2;
    i = 0;
    while (i < lakes) {
      centerX = Math.floor(Math.random() * (width - (maxRadius * 2)));
      centerY = Math.floor(Math.random() * (height - (maxRadius * 2)));
      centerX += maxRadius;
      centerY += maxRadius;
      radius = Math.floor(Math.random() * maxRadius) + 1;
      this._fillCircle(tiles, centerX, centerY, radius, Game.Tile.waterTile);
      i++;
    }
    return [tiles];
  };

  BossCavern.prototype.addEntity = function(entity) {
    var position;
    BossCavern.__super__.addEntity.call(this, entity);
    if (this.getPlayer() === entity) {
      position = this.getRandomFloorPosition(0);
      entity.setPosition(position.x, position.y, 0);
      this.getEngine().start();
    }
  };

  return BossCavern;

})(Game.Map);

},{"./../../game":33}],60:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Game = require('./../../game');

Game.Map.Cave = (function(_super) {
  __extends(Cave, _super);

  function Cave(tiles, player) {
    var entity, holePosition, i, level, templates, z;
    Cave.__super__.constructor.call(this, tiles);
    this.addEntityAtRandomPosition(player, 0);
    z = 0;
    while (z < this._depth) {
      i = 0;
      while (i < 15) {
        entity = Game.EntityRepository.createRandom();
        this.addEntityAtRandomPosition(entity, z);
        if (entity.hasMixin("ExperienceGainer")) {
          level = 0;
          while (level < z) {
            entity.giveExperience(entity.getNextLevelExperience() - entity.getExperience());
            level++;
          }
        }
        i++;
      }
      i = 0;
      while (i < 15) {
        this.addItemAtRandomPosition(Game.ItemRepository.createRandom(), z);
        i++;
      }
      z++;
    }
    templates = ["dagger", "sword", "staff", "tunic", "chainmail", "platemail"];
    i = 0;
    while (i < templates.length) {
      this.addItemAtRandomPosition(Game.ItemRepository.create(templates[i]), Math.floor(this._depth * Math.random()));
      i++;
    }
    holePosition = this.getRandomFloorPosition(this._depth - 1);
    this._tiles[this._depth - 1][holePosition.x][holePosition.y] = Game.Tile.holeToCavernTile;
    return;
  }

  return Cave;

})(Game.Map);

},{"./../../game":33}],61:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.Screen == null) {
  Game.Screen = {};
}

Game.Screen.ItemListScreen = (function() {
  function ItemListScreen(template) {
    this._caption = template["caption"];
    this._okFunction = template["ok"];
    this._isAcceptableFunction = template["isAcceptable"] || function(x) {
      return x;
    };
    this._canSelectItem = template["canSelect"];
    this._canSelectMultipleItems = template["canSelectMultipleItems"];
    this._hasNoItemOption = template["hasNoItemOption"];
  }

  ItemListScreen.prototype.setup = function(player, items) {
    var count, that;
    this._player = player;
    count = 0;
    that = this;
    this._items = items.map(function(item) {
      if (that._isAcceptableFunction(item)) {
        count++;
        return item;
      } else {
        return null;
      }
    });
    this._selectedIndices = {};
    return count;
  };

  ItemListScreen.prototype.render = function(display) {
    var i, letter, letters, row, selectionState, suffix, _results;
    letters = "abcdefghijklmnopqrstuvwxyz";
    display.drawText(0, 0, this._caption);
    if (this._hasNoItemOption) {
      display.drawText(0, 1, "0 - no item");
    }
    row = 0;
    i = 0;
    _results = [];
    while (i < this._items.length) {
      if (this._items[i]) {
        letter = letters.substring(i, i + 1);
        selectionState = (this._canSelectItem && this._canSelectMultipleItems && this._selectedIndices[i] ? "+" : "-");
        suffix = "";
        if (this._items[i] === this._player.getArmor()) {
          suffix = " (wearing)";
        } else {
          if (this._items[i] === this._player.getWeapon()) {
            suffix = " (wielding)";
          }
        }
        display.drawText(0, 2 + row, letter + " " + selectionState + " " + this._items[i].describe() + suffix);
        row++;
      }
      _results.push(i++);
    }
    return _results;
  };

  ItemListScreen.prototype.executeOkFunction = function() {
    var key, selectedItems;
    selectedItems = {};
    for (key in this._selectedIndices) {
      selectedItems[key] = this._items[key];
    }
    Game.Screen.playScreen.setSubScreen(undefined);
    if (this._okFunction(selectedItems)) {
      return this._player.getMap().getEngine().unlock();
    }
  };

  ItemListScreen.prototype.handleInput = function(inputType, inputData) {
    var index;
    if (inputType === "keydown") {
      if (inputData.keyCode === ROT.VK_ESCAPE || (inputData.keyCode === ROT.VK_RETURN && (!this._canSelectItem || Object.keys(this._selectedIndices).length === 0))) {
        return Game.Screen.playScreen.setSubScreen(undefined);
      } else if (inputData.keyCode === ROT.VK_RETURN) {
        return this.executeOkFunction();
      } else if (this._canSelectItem && this._hasNoItemOption && inputData.keyCode === ROT.VK_0) {
        this._selectedIndices = {};
        return this.executeOkFunction();
      } else if (this._canSelectItem && inputData.keyCode >= ROT.VK_A && inputData.keyCode <= ROT.VK_Z) {
        index = inputData.keyCode - ROT.VK_A;
        if (this._items[index]) {
          if (this._canSelectMultipleItems) {
            if (this._selectedIndices[index]) {
              delete this._selectedIndices[index];
            } else {
              this._selectedIndices[index] = true;
            }
            return Game.refresh();
          } else {
            this._selectedIndices[index] = true;
            return this.executeOkFunction();
          }
        }
      }
    }
  };

  return ItemListScreen;

})();

},{"./../../game":33}],62:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.Screen == null) {
  Game.Screen = {};
}

Game.Screen.TargetBasedScreen = (function() {
  function TargetBasedScreen(template) {
    template = template || {};
    this._isAcceptableFunction = template["okFunction"] || function(x, y) {
      return false;
    };
    this._captionFunction = template["captionFunction"] || function(x, y) {
      return "";
    };
  }

  TargetBasedScreen.prototype.setup = function(player, startX, startY, offsetX, offsetY) {
    var visibleCells;
    this._player = player;
    this._startX = startX - offsetX;
    this._startY = startY - offsetY;
    this._cursorX = this._startX;
    this._cursorY = this._startY;
    this._offsetX = offsetX;
    this._offsetY = offsetY;
    visibleCells = {};
    this._player.getMap().getFov(this._player.getZ()).compute(this._player.getX(), this._player.getY(), this._player.getSightRadius(), function(x, y, radius, visibility) {
      return visibleCells[x + "," + y] = true;
    });
    return this._visibleCells = visibleCells;
  };

  TargetBasedScreen.prototype.render = function(display) {
    var i, l, points;
    Game.Screen.playScreen.renderTiles.call(Game.Screen.playScreen, display);
    points = Game.getLine(this._startX, this._startY, this._cursorX, this._cursorY);
    i = 0;
    l = points.length;
    while (i < l) {
      display.drawText(points[i].x, points[i].y, "%c{magenta}*");
      i++;
    }
    return display.drawText(0, Game.getScreenHeight() - 1, this._captionFunction(this._cursorX + this._offsetX, this._cursorY + this._offsetY));
  };

  TargetBasedScreen.prototype.handleInput = function(inputType, inputData) {
    if (inputType === "keydown") {
      if (inputData.keyCode === ROT.VK_LEFT) {
        this.moveCursor(-1, 0);
      } else if (inputData.keyCode === ROT.VK_RIGHT) {
        this.moveCursor(1, 0);
      } else if (inputData.keyCode === ROT.VK_UP) {
        this.moveCursor(0, -1);
      } else if (inputData.keyCode === ROT.VK_DOWN) {
        this.moveCursor(0, 1);
      } else if (inputData.keyCode === ROT.VK_ESCAPE) {
        Game.Screen.playScreen.setSubScreen(undefined);
      } else {
        if (inputData.keyCode === ROT.VK_RETURN) {
          this.executeOkFunction();
        }
      }
    }
    return Game.refresh();
  };

  TargetBasedScreen.prototype.moveCursor = function(dx, dy) {
    this._cursorX = Math.max(0, Math.min(this._cursorX + dx, Game.getScreenWidth()));
    return this._cursorY = Math.max(0, Math.min(this._cursorY + dy, Game.getScreenHeight() - 1));
  };

  TargetBasedScreen.prototype.executeOkFunction = function() {
    Game.Screen.playScreen.setSubScreen(undefined);
    if (this._okFunction(this._cursorX + this._offsetX, this._cursorY + this._offsetY)) {
      return this._player.getMap().getEngine().unlock();
    }
  };

  return TargetBasedScreen;

})();

},{"./../../game":33}],63:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
window.onload = function() {
  var Game;
  if (ROT.isSupported()) {
    Game = require('./game');
    Game.init();
    document.body.appendChild(Game.getDisplay().getContainer());
    Game.switchScreen(Game.Screen.startScreen);
  } else {
    alert("The rot.js library isn't supported by your browser.");
  }
};

},{"./game":33}]},{},[63])
//@ sourceMappingURL=data:application/json;base64,
