// Generated by CoffeeScript 1.7.1
var Game,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Game = require('./../game');

Game.Entity = (function(_super) {
  __extends(Entity, _super);

  function Entity(properties) {
    properties = properties || {};
    Entity.__super__.constructor.call(this, properties);
    this._x = properties["x"] || 0;
    this._y = properties["y"] || 0;
    this._z = properties["z"] || 0;
    this._map = null;
    this._alive = true;
    this._speed = properties["speed"] || 1000;
    return;
  }

  Entity.prototype.setX = function(x) {
    this._x = x;
  };

  Entity.prototype.setY = function(y) {
    this._y = y;
  };

  Entity.prototype.setZ = function(z) {
    this._z = z;
  };

  Entity.prototype.setMap = function(map) {
    this._map = map;
  };

  Entity.prototype.setSpeed = function(speed) {
    this._speed = speed;
  };

  Entity.prototype.setPosition = function(x, y, z) {
    var oldX, oldY, oldZ;
    oldX = this._x;
    oldY = this._y;
    oldZ = this._z;
    this._x = x;
    this._y = y;
    this._z = z;
    if (this._map) {
      this._map.updateEntityPosition(this, oldX, oldY, oldZ);
    }
  };

  Entity.prototype.getX = function() {
    return this._x;
  };

  Entity.prototype.getY = function() {
    return this._y;
  };

  Entity.prototype.getZ = function() {
    return this._z;
  };

  Entity.prototype.getMap = function() {
    return this._map;
  };

  Entity.prototype.getSpeed = function() {
    return this._speed;
  };

  Entity.prototype.tryMove = function(x, y, z, map) {
    var items, target, tile;
    map = this.getMap();
    tile = map.getTile(x, y, this.getZ());
    target = map.getEntityAt(x, y, this.getZ());
    if (z < this.getZ()) {
      if (tile !== Game.Tile.stairsUpTile) {
        Game.sendMessage(this, "You can't go up here!");
      } else {
        Game.sendMessage(this, "You ascend to level %d!", [z + 1]);
        this.setPosition(x, y, z);
      }
    } else if (z > this.getZ()) {
      if (tile === Game.Tile.holeToCavernTile && this.hasMixin(Game.EntityMixins.PlayerActor)) {
        this.switchMap(new Game.Map.BossCavern());
      } else if (tile !== Game.Tile.stairsDownTile) {
        Game.sendMessage(this, "You can't go down here!");
      } else {
        this.setPosition(x, y, z);
        Game.sendMessage(this, "You descend to level %d!", [z + 1]);
      }
    } else if (target) {
      if (this.hasMixin("Attacker") && (this.hasMixin(Game.EntityMixins.PlayerActor) || target.hasMixin(Game.EntityMixins.PlayerActor))) {
        this.attack(target);
        return true;
      }
      return false;
    } else if (tile.isWalkable()) {
      this.setPosition(x, y, z);
      items = this.getMap().getItemsAt(x, y, z);
      if (items) {
        if (items.length === 1) {
          Game.sendMessage(this, "You see %s.", [items[0].describeA()]);
        } else {
          Game.sendMessage(this, "There are several objects here.");
        }
      }
      return true;
    } else if (tile.isDiggable()) {
      if (this.hasMixin(Game.EntityMixins.PlayerActor)) {
        map.dig(x, y, z);
        return true;
      }
      return false;
    }
    return false;
  };

  Entity.prototype.isAlive = function() {
    return this._alive;
  };

  Entity.prototype.kill = function(message) {
    if (!this._alive) {
      return;
    }
    this._alive = false;
    if (message) {
      Game.sendMessage(this, message);
    } else {
      Game.sendMessage(this, "You have died!");
    }
    if (this.hasMixin(Game.EntityMixins.PlayerActor)) {
      this.act();
    } else {
      this.getMap().removeEntity(this);
    }
  };

  Entity.prototype.switchMap = function(newMap) {
    if (newMap === this.getMap()) {
      return;
    }
    this.getMap().removeEntity(this);
    this._x = 0;
    this._y = 0;
    this._z = 0;
    newMap.addEntity(this);
  };

  return Entity;

})(Game.DynamicGlyph);

Game.EntityMixins = {};
