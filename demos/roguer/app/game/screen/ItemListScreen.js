// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.Screen == null) {
  Game.Screen = {};
}

Game.Screen.ItemListScreen = (function() {
  function ItemListScreen(template) {
    this._caption = template["caption"];
    this._okFunction = template["ok"];
    this._isAcceptableFunction = template["isAcceptable"] || function(x) {
      return x;
    };
    this._canSelectItem = template["canSelect"];
    this._canSelectMultipleItems = template["canSelectMultipleItems"];
    this._hasNoItemOption = template["hasNoItemOption"];
  }

  ItemListScreen.prototype.setup = function(player, items) {
    var count, that;
    this._player = player;
    count = 0;
    that = this;
    this._items = items.map(function(item) {
      if (that._isAcceptableFunction(item)) {
        count++;
        return item;
      } else {
        return null;
      }
    });
    this._selectedIndices = {};
    return count;
  };

  ItemListScreen.prototype.render = function(display) {
    var i, letter, letters, row, selectionState, suffix, _results;
    letters = "abcdefghijklmnopqrstuvwxyz";
    display.drawText(0, 0, this._caption);
    if (this._hasNoItemOption) {
      display.drawText(0, 1, "0 - no item");
    }
    row = 0;
    i = 0;
    _results = [];
    while (i < this._items.length) {
      if (this._items[i]) {
        letter = letters.substring(i, i + 1);
        selectionState = (this._canSelectItem && this._canSelectMultipleItems && this._selectedIndices[i] ? "+" : "-");
        suffix = "";
        if (this._items[i] === this._player.getArmor()) {
          suffix = " (wearing)";
        } else {
          if (this._items[i] === this._player.getWeapon()) {
            suffix = " (wielding)";
          }
        }
        display.drawText(0, 2 + row, letter + " " + selectionState + " " + this._items[i].describe() + suffix);
        row++;
      }
      _results.push(i++);
    }
    return _results;
  };

  ItemListScreen.prototype.executeOkFunction = function() {
    var key, selectedItems;
    selectedItems = {};
    for (key in this._selectedIndices) {
      selectedItems[key] = this._items[key];
    }
    Game.Screen.playScreen.setSubScreen(undefined);
    if (this._okFunction(selectedItems)) {
      return this._player.getMap().getEngine().unlock();
    }
  };

  ItemListScreen.prototype.handleInput = function(inputType, inputData) {
    var index;
    if (inputType === "keydown") {
      if (inputData.keyCode === ROT.VK_ESCAPE || (inputData.keyCode === ROT.VK_RETURN && (!this._canSelectItem || Object.keys(this._selectedIndices).length === 0))) {
        return Game.Screen.playScreen.setSubScreen(undefined);
      } else if (inputData.keyCode === ROT.VK_RETURN) {
        return this.executeOkFunction();
      } else if (this._canSelectItem && this._hasNoItemOption && inputData.keyCode === ROT.VK_0) {
        this._selectedIndices = {};
        return this.executeOkFunction();
      } else if (this._canSelectItem && inputData.keyCode >= ROT.VK_A && inputData.keyCode <= ROT.VK_Z) {
        index = inputData.keyCode - ROT.VK_A;
        if (this._items[index]) {
          if (this._canSelectMultipleItems) {
            if (this._selectedIndices[index]) {
              delete this._selectedIndices[index];
            } else {
              this._selectedIndices[index] = true;
            }
            return Game.refresh();
          } else {
            this._selectedIndices[index] = true;
            return this.executeOkFunction();
          }
        }
      }
    }
  };

  return ItemListScreen;

})();
