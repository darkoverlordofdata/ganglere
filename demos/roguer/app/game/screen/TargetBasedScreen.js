// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

if (Game.Screen == null) {
  Game.Screen = {};
}

Game.Screen.TargetBasedScreen = (function() {
  function TargetBasedScreen(template) {
    template = template || {};
    this._isAcceptableFunction = template["okFunction"] || function(x, y) {
      return false;
    };
    this._captionFunction = template["captionFunction"] || function(x, y) {
      return "";
    };
  }

  TargetBasedScreen.prototype.setup = function(player, startX, startY, offsetX, offsetY) {
    var visibleCells;
    this._player = player;
    this._startX = startX - offsetX;
    this._startY = startY - offsetY;
    this._cursorX = this._startX;
    this._cursorY = this._startY;
    this._offsetX = offsetX;
    this._offsetY = offsetY;
    visibleCells = {};
    this._player.getMap().getFov(this._player.getZ()).compute(this._player.getX(), this._player.getY(), this._player.getSightRadius(), function(x, y, radius, visibility) {
      return visibleCells[x + "," + y] = true;
    });
    return this._visibleCells = visibleCells;
  };

  TargetBasedScreen.prototype.render = function(display) {
    var i, l, points;
    Game.Screen.playScreen.renderTiles.call(Game.Screen.playScreen, display);
    points = Game.getLine(this._startX, this._startY, this._cursorX, this._cursorY);
    i = 0;
    l = points.length;
    while (i < l) {
      display.drawText(points[i].x, points[i].y, "%c{magenta}*");
      i++;
    }
    return display.drawText(0, Game.getScreenHeight() - 1, this._captionFunction(this._cursorX + this._offsetX, this._cursorY + this._offsetY));
  };

  TargetBasedScreen.prototype.handleInput = function(inputType, inputData) {
    if (inputType === "keydown") {
      if (inputData.keyCode === ROT.VK_LEFT) {
        this.moveCursor(-1, 0);
      } else if (inputData.keyCode === ROT.VK_RIGHT) {
        this.moveCursor(1, 0);
      } else if (inputData.keyCode === ROT.VK_UP) {
        this.moveCursor(0, -1);
      } else if (inputData.keyCode === ROT.VK_DOWN) {
        this.moveCursor(0, 1);
      } else if (inputData.keyCode === ROT.VK_ESCAPE) {
        Game.Screen.playScreen.setSubScreen(undefined);
      } else {
        if (inputData.keyCode === ROT.VK_RETURN) {
          this.executeOkFunction();
        }
      }
    }
    return Game.refresh();
  };

  TargetBasedScreen.prototype.moveCursor = function(dx, dy) {
    this._cursorX = Math.max(0, Math.min(this._cursorX + dx, Game.getScreenWidth()));
    return this._cursorY = Math.max(0, Math.min(this._cursorY + dy, Game.getScreenHeight() - 1));
  };

  TargetBasedScreen.prototype.executeOkFunction = function() {
    Game.Screen.playScreen.setSubScreen(undefined);
    if (this._okFunction(this._cursorX + this._offsetX, this._cursorY + this._offsetY)) {
      return this._player.getMap().getEngine().unlock();
    }
  };

  return TargetBasedScreen;

})();
