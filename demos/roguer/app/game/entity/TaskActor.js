// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.EntityMixins.TaskActor = {
  name: "TaskActor",
  groupName: "Actor",
  init: function(template) {
    return this._tasks = template["tasks"] || ["wander"];
  },
  act: function() {
    var i;
    i = 0;
    while (i < this._tasks.length) {
      if (this.canDoTask(this._tasks[i])) {
        this[this._tasks[i]]();
        return;
      }
      i++;
    }
  },
  canDoTask: function(task) {
    if (task === "hunt") {
      return this.hasMixin("Sight") && this.canSee(this.getMap().getPlayer());
    } else if (task === "wander") {
      return true;
    } else {
      throw new Error("Tried to perform undefined task " + task);
    }
  },
  hunt: function() {
    var count, offsets, path, player, source, z;
    player = this.getMap().getPlayer();
    offsets = Math.abs(player.getX() - this.getX()) + Math.abs(player.getY() - this.getY());
    if (offsets === 1) {
      if (this.hasMixin("Attacker")) {
        this.attack(player);
        return;
      }
    }
    source = this;
    z = source.getZ();
    path = new ROT.Path.AStar(player.getX(), player.getY(), function(x, y) {
      var entity;
      entity = source.getMap().getEntityAt(x, y, z);
      if (entity && entity !== player && entity !== source) {
        return false;
      }
      return source.getMap().getTile(x, y, z).isWalkable();
    }, {
      topology: 4
    });
    count = 0;
    return path.compute(source.getX(), source.getY(), function(x, y) {
      if (count === 1) {
        source.tryMove(x, y, z);
      }
      return count++;
    });
  },
  wander: function() {
    var moveOffset;
    moveOffset = (Math.round(Math.random()) === 1 ? 1 : -1);
    if (Math.round(Math.random()) === 1) {
      return this.tryMove(this.getX() + moveOffset, this.getY(), this.getZ());
    } else {
      return this.tryMove(this.getX(), this.getY() + moveOffset, this.getZ());
    }
  }
};
