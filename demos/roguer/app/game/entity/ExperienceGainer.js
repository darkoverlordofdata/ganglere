// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../../game');

Game.EntityMixins.ExperienceGainer = {
  name: "ExperienceGainer",
  init: function(template) {
    this._level = template["level"] || 1;
    this._experience = template["experience"] || 0;
    this._statPointsPerLevel = template["statPointsPerLevel"] || 1;
    this._statPoints = 0;
    this._statOptions = [];
    if (this.hasMixin("Attacker")) {
      this._statOptions.push(["Increase attack value", this.increaseAttackValue]);
    }
    if (this.hasMixin("Destructible")) {
      this._statOptions.push(["Increase defense value", this.increaseDefenseValue]);
      this._statOptions.push(["Increase max health", this.increaseMaxHp]);
    }
    if (this.hasMixin("Sight")) {
      return this._statOptions.push(["Increase sight range", this.increaseSightRadius]);
    }
  },
  getLevel: function() {
    return this._level;
  },
  getExperience: function() {
    return this._experience;
  },
  getNextLevelExperience: function() {
    return (this._level * this._level) * 10;
  },
  getStatPoints: function() {
    return this._statPoints;
  },
  setStatPoints: function(statPoints) {
    return this._statPoints = statPoints;
  },
  getStatOptions: function() {
    return this._statOptions;
  },
  giveExperience: function(points) {
    var levelsGained, statPointsGained, usedPoints;
    statPointsGained = 0;
    levelsGained = 0;
    while (points > 0) {
      if (this._experience + points >= this.getNextLevelExperience()) {
        usedPoints = this.getNextLevelExperience() - this._experience;
        points -= usedPoints;
        this._experience += usedPoints;
        this._level++;
        levelsGained++;
        this._statPoints += this._statPointsPerLevel;
        statPointsGained += this._statPointsPerLevel;
      } else {
        this._experience += points;
        points = 0;
      }
    }
    if (levelsGained > 0) {
      Game.sendMessage(this, "You advance to level %d.", [this._level]);
      return this.raiseEvent("onGainLevel");
    }
  },
  listeners: {
    onKill: function(victim) {
      var exp;
      exp = victim.getMaxHp() + victim.getDefenseValue();
      if (victim.hasMixin("Attacker")) {
        exp += victim.getAttackValue();
      }
      if (victim.hasMixin("ExperienceGainer")) {
        exp -= (this.getLevel() - victim.getLevel()) * 3;
      }
      if (exp > 0) {
        return this.giveExperience(exp);
      }
    },
    details: function() {
      return [
        {
          key: "level",
          value: this.getLevel()
        }
      ];
    }
  }
};
