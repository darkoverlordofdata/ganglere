// Generated by CoffeeScript 1.7.1
var Game,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Game = require('./../game');

Game.DynamicGlyph = (function(_super) {
  __extends(DynamicGlyph, _super);

  function DynamicGlyph(properties) {
    var i, key, mixins;
    properties = properties || {};
    DynamicGlyph.__super__.constructor.call(this, properties);
    this._name = properties["name"] || "";
    this._attachedMixins = {};
    this._attachedMixinGroups = {};
    this._listeners = {};
    mixins = properties["mixins"] || [];
    i = 0;
    while (i < mixins.length) {
      for (key in mixins[i]) {
        if (key !== "init" && key !== "name" && key !== "listeners" && !this.hasOwnProperty(key)) {
          this[key] = mixins[i][key];
        }
      }
      this._attachedMixins[mixins[i].name] = true;
      if (mixins[i].groupName) {
        this._attachedMixinGroups[mixins[i].groupName] = true;
      }
      if (mixins[i].listeners) {
        for (key in mixins[i].listeners) {
          if (!this._listeners[key]) {
            this._listeners[key] = [];
          }
          this._listeners[key].push(mixins[i].listeners[key]);
        }
      }
      if (mixins[i].init) {
        mixins[i].init.call(this, properties);
      }
      i++;
    }
    return;
  }

  DynamicGlyph.prototype.hasMixin = function(obj) {
    if (typeof obj === "object") {
      return this._attachedMixins[obj.name];
    } else {
      return this._attachedMixins[obj] || this._attachedMixinGroups[obj];
    }
  };

  DynamicGlyph.prototype.setName = function(name) {
    return this._name = name;
  };

  DynamicGlyph.prototype.getName = function() {
    return this._name;
  };

  DynamicGlyph.prototype.describe = function() {
    return this._name;
  };

  DynamicGlyph.prototype.describeA = function(capitalize) {
    var firstLetter, prefix, prefixes, string;
    prefixes = (capitalize ? ["A", "An"] : ["a", "an"]);
    string = this.describe();
    firstLetter = string.charAt(0).toLowerCase();
    prefix = ("aeiou".indexOf(firstLetter) >= 0 ? 1 : 0);
    return prefixes[prefix] + " " + string;
  };

  DynamicGlyph.prototype.describeThe = function(capitalize) {
    var prefix;
    prefix = (capitalize ? "The" : "the");
    return prefix + " " + this.describe();
  };

  DynamicGlyph.prototype.raiseEvent = function(event) {
    var args, i, results;
    if (!this._listeners[event]) {
      return;
    }
    args = Array.prototype.slice.call(arguments, 1);
    results = [];
    i = 0;
    while (i < this._listeners[event].length) {
      results.push(this._listeners[event][i].apply(this, args));
      i++;
    }
    return results;
  };

  DynamicGlyph.prototype.details = function() {
    var detailGroups, details, i, j, l;
    details = [];
    detailGroups = this.raiseEvent("details");
    if (detailGroups) {
      i = 0;
      l = detailGroups.length;
      while (i < l) {
        if (detailGroups[i]) {
          j = 0;
          while (j < detailGroups[i].length) {
            details.push(detailGroups[i][j].key + ": " + detailGroups[i][j].value);
            j++;
          }
        }
        i++;
      }
    }
    return details.join(", ");
  };

  return DynamicGlyph;

})(Game.Glyph);
