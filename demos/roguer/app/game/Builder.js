// Generated by CoffeeScript 1.7.1
var Game;

Game = require('./../game');

Game.Builder = (function() {
  function Builder(width, height, depth) {
    var x, y, z;
    this._width = width;
    this._height = height;
    this._depth = depth;
    this._tiles = new Array(depth);
    this._regions = new Array(depth);
    z = 0;
    while (z < depth) {
      this._tiles[z] = this._generateLevel();
      this._regions[z] = new Array(width);
      x = 0;
      while (x < width) {
        this._regions[z][x] = new Array(height);
        y = 0;
        while (y < height) {
          this._regions[z][x][y] = 0;
          y++;
        }
        x++;
      }
      z++;
    }
    z = 0;
    while (z < this._depth) {
      this._setupRegions(z);
      z++;
    }
    this._connectAllRegions();
    return;
  }

  Builder.prototype.getTiles = function() {
    return this._tiles;
  };

  Builder.prototype.getDepth = function() {
    return this._depth;
  };

  Builder.prototype.getWidth = function() {
    return this._width;
  };

  Builder.prototype.getHeight = function() {
    return this._height;
  };

  Builder.prototype._generateLevel = function() {
    var generator, i, map, totalIterations, w;
    map = new Array(this._width);
    w = 0;
    while (w < this._width) {
      map[w] = new Array(this._height);
      w++;
    }
    generator = new ROT.Map.Cellular(this._width, this._height);
    generator.randomize(0.5);
    totalIterations = 3;
    i = 0;
    while (i < totalIterations - 1) {
      generator.create();
      i++;
    }
    generator.create(function(x, y, v) {
      if (v === 1) {
        return map[x][y] = Game.Tile.floorTile;
      } else {
        return map[x][y] = Game.Tile.wallTile;
      }
    });
    return map;
  };

  Builder.prototype._canFillRegion = function(x, y, z) {
    if (x < 0 || y < 0 || z < 0 || x >= this._width || y >= this._height || z >= this._depth) {
      return false;
    }
    if (this._regions[z][x][y] !== 0) {
      return false;
    }
    return this._tiles[z][x][y].isWalkable();
  };

  Builder.prototype._fillRegion = function(region, x, y, z) {
    var neighbors, tile, tiles, tilesFilled;
    tilesFilled = 1;
    tiles = [
      {
        x: x,
        y: y
      }
    ];
    tile = void 0;
    neighbors = void 0;
    this._regions[z][x][y] = region;
    while (tiles.length > 0) {
      tile = tiles.pop();
      neighbors = Game.getNeighborPositions(tile.x, tile.y);
      while (neighbors.length > 0) {
        tile = neighbors.pop();
        if (this._canFillRegion(tile.x, tile.y, z)) {
          this._regions[z][tile.x][tile.y] = region;
          tiles.push(tile);
          tilesFilled++;
        }
      }
    }
    return tilesFilled;
  };

  Builder.prototype._removeRegion = function(region, z) {
    var x, y;
    x = 0;
    while (x < this._width) {
      y = 0;
      while (y < this._height) {
        if (this._regions[z][x][y] === region) {
          this._regions[z][x][y] = 0;
          this._tiles[z][x][y] = Game.Tile.wallTile;
        }
        y++;
      }
      x++;
    }
  };

  Builder.prototype._setupRegions = function(z) {
    var region, tilesFilled, x, y;
    region = 1;
    tilesFilled = void 0;
    x = 0;
    while (x < this._width) {
      y = 0;
      while (y < this._height) {
        if (this._canFillRegion(x, y, z)) {
          tilesFilled = this._fillRegion(region, x, y, z);
          if (tilesFilled <= 20) {
            this._removeRegion(region, z);
          } else {
            region++;
          }
        }
        y++;
      }
      x++;
    }
  };

  Builder.prototype._findRegionOverlaps = function(z, r1, r2) {
    var matches, x, y;
    matches = [];
    x = 0;
    while (x < this._width) {
      y = 0;
      while (y < this._height) {
        if (this._tiles[z][x][y] === Game.Tile.floorTile && this._tiles[z + 1][x][y] === Game.Tile.floorTile && this._regions[z][x][y] === r1 && this._regions[z + 1][x][y] === r2) {
          matches.push({
            x: x,
            y: y
          });
        }
        y++;
      }
      x++;
    }
    return matches.randomize();
  };

  Builder.prototype._connectRegions = function(z, r1, r2) {
    var overlap, point;
    overlap = this._findRegionOverlaps(z, r1, r2);
    if (overlap.length === 0) {
      return false;
    }
    point = overlap[0];
    this._tiles[z][point.x][point.y] = Game.Tile.stairsDownTile;
    this._tiles[z + 1][point.x][point.y] = Game.Tile.stairsUpTile;
    return true;
  };

  Builder.prototype._connectAllRegions = function() {
    var connected, key, x, y, z;
    z = 0;
    while (z < this._depth - 1) {
      connected = {};
      key = void 0;
      x = 0;
      while (x < this._width) {
        y = 0;
        while (y < this._height) {
          key = this._regions[z][x][y] + "," + this._regions[z + 1][x][y];
          if (this._tiles[z][x][y] === Game.Tile.floorTile && this._tiles[z + 1][x][y] === Game.Tile.floorTile && !connected[key]) {
            this._connectRegions(z, this._regions[z][x][y], this._regions[z + 1][x][y]);
            connected[key] = true;
          }
          y++;
        }
        x++;
      }
      z++;
    }
  };

  return Builder;

})();
