// Generated by CoffeeScript 1.10.0
"use strict";
var ganglere,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ganglere = require('../ganglere');

ganglere.Assets = (function(superClass) {
  extend(Assets, superClass);

  Assets.prototype.splashScreen = Phaser.Sprite;

  function Assets() {}

  Assets.background = null;

  Assets.preloadBar = null;

  Assets.preloadBgd = null;

  Assets.ready = false;

  Assets.prototype.preload = function() {
    var file, ix, key, level, ref, ref1, results, sprite;
    this.add.sprite(0, 0, 'splash');
    this.preloadBgd = this.add.sprite(this.game.width / 2 - 250, this.game.height - 100, 'preloaderBackground');
    this.preloadBar = this.add.sprite(this.game.width / 2 - 250, this.game.height - 100, 'preloaderBar');
    this.load.setPreloadSprite(this.preloadBar);
    this.load.image('background', 'assets/images/background.png');
    this.load.image('backButton', 'assets/images/buttons/back1.png');
    this.load.image('playButton', 'assets/images/buttons/play1.png');
    this.load.image('scoreButton', 'assets/images/buttons/score1.png');
    this.load.image('creditsButton', 'assets/images/buttons/credits1.png');
    this.load.image('quote', 'assets/images/quote.png');
    this.load.image('icon', 'assets/images/icon.png');
    ref = ganglere.config.levels;
    for (key in ref) {
      level = ref[key];
      this.load.json(level.options.map + ".json", "assets/levels/" + level.options.map + ".json");
    }
    ref1 = ganglere.config.sprites;
    results = [];
    for (key in ref1) {
      sprite = ref1[key];
      if ('string' === typeof sprite.file) {
        results.push(this.load.spritesheet(key, sprite.file, sprite.width, sprite.height));
      } else {
        if (sprite.selected != null) {
          this.load.spritesheet(key, sprite.file[sprite.selected], sprite.width, sprite.height);
        }
        results.push((function() {
          var i, len, ref2, results1;
          ref2 = sprite.file;
          results1 = [];
          for (ix = i = 0, len = ref2.length; i < len; ix = ++i) {
            file = ref2[ix];
            results1.push(this.load.spritesheet(key + "[" + ix + "]", file, sprite.width, sprite.height));
          }
          return results1;
        }).call(this));
      }
    }
    return results;
  };

  Assets.prototype.create = function() {
    return this.preloadBar.cropEnabled = false;
  };

  Assets.prototype.update = function() {
    return this.state.start('Intro', true, false, {
      level: 0
    });
  };

  return Assets;

})(Phaser.State);
