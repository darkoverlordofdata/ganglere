// Generated by CoffeeScript 1.7.1
"use strict";
var ganglere,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ganglere = require('../ganglere');

ganglere.Assets = (function(_super) {
  __extends(Assets, _super);

  Assets.prototype.splashScreen = Phaser.Sprite;

  function Assets() {}

  Assets.background = null;

  Assets.preloadBar = null;

  Assets.preloadBgd = null;

  Assets.ready = false;

  Assets.prototype.preload = function() {
    var file, ix, key, level, sprite, _ref, _ref1, _results;
    this.add.sprite(0, 0, 'splash');
    this.preloadBgd = this.add.sprite(this.game.width / 2 - 250, this.game.height - 100, 'preloaderBackground');
    this.preloadBar = this.add.sprite(this.game.width / 2 - 250, this.game.height - 100, 'preloaderBar');
    this.load.setPreloadSprite(this.preloadBar);
    this.load.image('background', 'assets/images/background.png');
    this.load.image('backButton', 'assets/images/buttons/back1.png');
    this.load.image('playButton', 'assets/images/buttons/play1.png');
    this.load.image('scoreButton', 'assets/images/buttons/score1.png');
    this.load.image('creditsButton', 'assets/images/buttons/credits1.png');
    this.load.image('quote', 'assets/images/quote.png');
    this.load.image('icon', 'assets/images/icon.png');
    _ref = ganglere.config.levels;
    for (key in _ref) {
      level = _ref[key];
      this.load.json("" + level.options.map + ".json", "assets/levels/" + level.options.map + ".json");
    }
    _ref1 = ganglere.config.sprites;
    _results = [];
    for (key in _ref1) {
      sprite = _ref1[key];
      if ('string' === typeof sprite.file) {
        _results.push(this.load.spritesheet(key, sprite.file, sprite.width, sprite.height));
      } else {
        if (sprite.selected != null) {
          this.load.spritesheet(key, sprite.file[sprite.selected], sprite.width, sprite.height);
        }
        _results.push((function() {
          var _i, _len, _ref2, _results1;
          _ref2 = sprite.file;
          _results1 = [];
          for (ix = _i = 0, _len = _ref2.length; _i < _len; ix = ++_i) {
            file = _ref2[ix];
            _results1.push(this.load.spritesheet("" + key + "[" + ix + "]", file, sprite.width, sprite.height));
          }
          return _results1;
        }).call(this));
      }
    }
    return _results;
  };

  Assets.prototype.create = function() {
    return this.preloadBar.cropEnabled = false;
  };

  Assets.prototype.update = function() {
    return this.state.start('Intro', true, false, {
      level: 0
    });
  };

  return Assets;

})(Phaser.State);
