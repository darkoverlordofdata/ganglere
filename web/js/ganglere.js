(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
"use strict";
var ganglere;

ganglere = require('../ganglere');

ganglere.AI = (function() {
  var hunt, reshuffle, wander;

  AI.prototype.game = null;

  reshuffle = [
    {
      x: -1,
      y: 0
    }, {
      x: 1,
      y: 0
    }, {
      x: 0,
      y: -1
    }, {
      x: 0,
      y: 1
    }
  ];

  wander = function() {
    var i, j, t;
    i = reshuffle.length;
    while (--i > 0) {
      j = ~~(Math.random() * (i + 1));
      t = reshuffle[j];
      reshuffle[j] = reshuffle[i];
      reshuffle[i] = t;
    }
    return reshuffle;
  };

  hunt = function(deltaX, deltaY) {
    return [
      {
        x: -1,
        y: 0
      }, {
        x: 1,
        y: 0
      }, {
        x: 0,
        y: -1
      }, {
        x: 0,
        y: 1
      }
    ].map(function(direction) {
      return {
        x: direction.x,
        y: direction.y,
        distance: Math.pow(deltaX + direction.x, 2) + Math.pow(deltaY + direction.y, 2)
      };
    }).sort(function(a, b) {
      return b.distance - a.distance;
    });
  };

  function AI(game) {
    this.game = game;
  }

  AI.prototype.wander = function(actor) {
    var direction, _i, _len, _ref, _results;
    _ref = wander();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      direction = _ref[_i];
      if (this.game.moveTo(actor, direction)) {
        break;
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  AI.prototype.hunt = function(actor, deltaX, deltaY) {
    var direction, _i, _len, _ref, _results;
    _ref = hunt(deltaX, deltaY);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      direction = _ref[_i];
      if (this.game.moveTo(actor, direction)) {
        break;
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return AI;

})();

},{"../ganglere":15}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
"use strict";
var ganglere,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ganglere = require('../ganglere');

ganglere.Actor = (function() {
  var FRAME_BACK, FRAME_FRONT, FRAME_LEFT, FRAME_RIGHT, HUNTER, WHITE, _ref;

  Actor.all = [];

  Actor.map = {};

  _ref = ganglere.config, FRAME_FRONT = _ref.FRAME_FRONT, FRAME_BACK = _ref.FRAME_BACK, FRAME_LEFT = _ref.FRAME_LEFT, FRAME_RIGHT = _ref.FRAME_RIGHT;

  WHITE = '#fff';

  HUNTER = '#ff0044';

  Actor.prototype.isPlayer = false;

  Actor.prototype.game = null;

  Actor.prototype.sprite = null;

  Actor.prototype.x = 0;

  Actor.prototype.y = 0;

  Actor.prototype.hp = 0;

  Actor.prototype.damage = "d8+2";

  function Actor(game, x, y, key) {
    this.setFrame = __bind(this.setFrame, this);
    this.setOfset = __bind(this.setOfset, this);
    this.setXY = __bind(this.setXY, this);
    this.attack = __bind(this.attack, this);
    this.move = __bind(this.move, this);
    this.hp = 3;
    this.x = x;
    this.y = y;
    this.config = ganglere.config.sprites[key];
    this.setOfset(this.config.axis);
    this.key = this.config.selected != null ? "" + key + "[" + this.config.selected + "]" : key;
    if (game) {
      this.game = game;
      this.sprite = game.add.sprite(x * 32, y * 32, this.key);
    }
  }

  Actor.prototype.move = function() {};

  Actor.prototype.attack = function(victim) {
    var axis, color, damage, dir, pos1, pos2;
    damage = ganglere.Random.diceRoll(this.damage).total;
    victim.hp -= damage;
    axis = this.x === victim.x ? "y" : "x";
    dir = victim[axis] - this[axis];
    dir = dir / Math.abs(dir);
    pos1 = {};
    pos2 = {};
    pos1[axis] = (dir * 15).toString();
    pos2[axis] = (dir * 15 * (-1)).toString();
    this.game.camera.follow(false);
    this.game.add.tween(this.sprite).to(pos1, 200, Phaser.Easing.Elastic.In, true).to(pos2, 200, Phaser.Easing.Elastic.Out, true).onComplete.add(((function(_this) {
      return function() {
        return _this.game.camera.follow(_this.sprite);
      };
    })(this)), this);
    color = victim.isPlayer ? HUNTER : WHITE;
    return this.game.showDamage(damage.toString(), victim.sprite, 450, color);
  };

  Actor.prototype.setXY = function(x, y) {
    this.x = x;
    this.y = y;
    this.game.add.tween(this.sprite).to({
      x: x * 32,
      y: y * 32
    }, 500, Phaser.Easing.Linear.None, true);
  };

  Actor.prototype.setOfset = function(axis) {
    var r0, r1, r2, r3;
    switch (this.config.type) {
      case 0:
        r0 = axis * 4 + this.config.order[0];
        r1 = axis * 4 + this.config.order[1];
        r2 = axis * 4 + this.config.order[2];
        r3 = axis * 4 + this.config.order[3];
        break;
      case 1:
        r0 = axis + this.config.cols * this.config.order[0];
        r1 = axis + this.config.cols * this.config.order[1];
        r2 = axis + this.config.cols * this.config.order[2];
        r3 = axis + this.config.cols * this.config.order[3];
        break;
      default:
        r0 = 0;
        r1 = 0;
        r2 = 0;
        r3 = 0;
    }
    return this.ofset = [r0, r1, r2, r3];
  };

  Actor.prototype.setFrame = function(dir) {
    if (dir.x === 1) {
      return this.sprite.frame = this.ofset[FRAME_RIGHT];
    } else if (dir.x === -1) {
      return this.sprite.frame = this.ofset[FRAME_LEFT];
    } else if (dir.y === -1) {
      return this.sprite.frame = this.ofset[FRAME_BACK];
    } else if (dir.y === 1) {
      return this.sprite.frame = this.ofset[FRAME_FRONT];
    }
  };

  return Actor;

})();

},{"../ganglere":15}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
"use strict";
var ganglere,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ganglere = require('../ganglere');

ganglere.Assets = (function(_super) {
  __extends(Assets, _super);

  Assets.prototype.splashScreen = Phaser.Sprite;

  function Assets() {}

  Assets.background = null;

  Assets.preloadBar = null;

  Assets.preloadBgd = null;

  Assets.ready = false;

  Assets.prototype.preload = function() {
    var file, ix, key, level, sprite, _ref, _ref1, _results;
    this.add.sprite(0, 0, 'splash');
    this.preloadBgd = this.add.sprite(this.game.width / 2 - 250, this.game.height - 100, 'preloaderBackground');
    this.preloadBar = this.add.sprite(this.game.width / 2 - 250, this.game.height - 100, 'preloaderBar');
    this.load.setPreloadSprite(this.preloadBar);
    this.load.image('background', 'assets/images/background.png');
    this.load.image('backButton', 'assets/images/buttons/back1.png');
    this.load.image('playButton', 'assets/images/buttons/play1.png');
    this.load.image('scoreButton', 'assets/images/buttons/score1.png');
    this.load.image('creditsButton', 'assets/images/buttons/credits1.png');
    this.load.image('quote', 'assets/images/quote.png');
    this.load.image('icon', 'assets/images/icon.png');
    _ref = ganglere.config.levels;
    for (key in _ref) {
      level = _ref[key];
      this.load.json("" + level.options.map + ".json", "assets/levels/" + level.options.map + ".json");
    }
    _ref1 = ganglere.config.sprites;
    _results = [];
    for (key in _ref1) {
      sprite = _ref1[key];
      if ('string' === typeof sprite.file) {
        _results.push(this.load.spritesheet(key, sprite.file, sprite.width, sprite.height));
      } else {
        if (sprite.selected != null) {
          this.load.spritesheet(key, sprite.file[sprite.selected], sprite.width, sprite.height);
        }
        _results.push((function() {
          var _i, _len, _ref2, _results1;
          _ref2 = sprite.file;
          _results1 = [];
          for (ix = _i = 0, _len = _ref2.length; _i < _len; ix = ++_i) {
            file = _ref2[ix];
            _results1.push(this.load.spritesheet("" + key + "[" + ix + "]", file, sprite.width, sprite.height));
          }
          return _results1;
        }).call(this));
      }
    }
    return _results;
  };

  Assets.prototype.create = function() {
    return this.preloadBar.cropEnabled = false;
  };

  Assets.prototype.update = function() {
    return this.state.start('Intro', true, false, {
      level: 0
    });
  };

  return Assets;

})(Phaser.State);

},{"../ganglere":15}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
"use strict";
var Config, FRAME_BACK, FRAME_FRONT, FRAME_LEFT, FRAME_RIGHT, ganglere;

FRAME_FRONT = 0;

FRAME_BACK = 1;

FRAME_RIGHT = 2;

FRAME_LEFT = 3;

ganglere = require("../ganglere");

ganglere.config = new (Config = (function() {
  function Config() {}

  Config.prototype.FRAME_FRONT = FRAME_FRONT;

  Config.prototype.FRAME_BACK = FRAME_BACK;

  Config.prototype.FRAME_RIGHT = FRAME_RIGHT;

  Config.prototype.FRAME_LEFT = FRAME_LEFT;

  Config.prototype.name = 'The Deluding of Gylfe';

  Config.prototype.sprites = {
    'forest-tiles': {
      file: 'assets/images/foresttiles_0.png',
      width: 32,
      height: 32,
      cols: 5,
      rows: 7
    },
    heroes: {
      file: ['assets/sprites/Heroes/Fighter-F-01.png', 'assets/sprites/Heroes/Fighter-F-02.png', 'assets/sprites/Heroes/Fighter-M-01.png', 'assets/sprites/Heroes/Fighter-M-02.png', 'assets/sprites/Heroes/Healer-F-01.png', 'assets/sprites/Heroes/Healer-M-01.png', 'assets/sprites/Heroes/Mage-F-01.png', 'assets/sprites/Heroes/Mage-M-01.png', 'assets/sprites/Heroes/Ranger-F-01.png', 'assets/sprites/Heroes/Ranger-M-01.png'],
      selected: 9,
      width: 24,
      height: 32,
      cols: 6,
      rows: 4,
      type: 1,
      axis: 0,
      order: [FRAME_RIGHT, FRAME_FRONT, FRAME_BACK, FRAME_LEFT]
    },
    fenris: {
      file: 'assets/images/wolves.png',
      width: 32,
      height: 32,
      cols: 3,
      rows: 4,
      type: 1,
      axis: 0,
      order: [FRAME_FRONT, FRAME_LEFT, FRAME_RIGHT, FRAME_BACK]
    },
    loke: {
      file: ['assets/images/ogres1.png', 'assets/images/ogres2.png'],
      selected: 1,
      width: 32,
      height: 32,
      cols: 4,
      rows: 4,
      type: 0,
      axis: 3,
      order: [FRAME_FRONT, FRAME_LEFT, FRAME_BACK, FRAME_RIGHT]
    },
    thor: {
      file: ['assets/images/ogres1.png', 'assets/images/ogres2.png'],
      selected: 1,
      width: 32,
      height: 32,
      cols: 4,
      rows: 4,
      type: 0,
      axis: 2,
      order: [FRAME_FRONT, FRAME_LEFT, FRAME_BACK, FRAME_RIGHT]
    }
  };

  Config.prototype.levels = {
    Fenris: {
      title: 'Fenris at the Gate',
      options: {
        actors: 20,
        map: 'fenris',
        hide: false,
        artifacts: false
      },
      player: {
        hp: 60,
        sprite: "heroes",
        damage: "d6+2"
      },
      enemy: {
        hp: 5,
        sprite: "fenris",
        damage: "d2+0"
      }
    },
    Loke: {
      title: 'Combat with Loke',
      options: {
        actors: 10,
        map: 'loke',
        hide: false,
        artifacts: false
      },
      player: {
        hp: 200,
        sprite: "heroes",
        damage: "d6+2"
      },
      enemy: {
        hp: 5,
        sprite: "loke",
        damage: "d2+1"
      }
    },
    Thor: {
      title: 'Thor beats your a$$!',
      options: {
        actors: 25,
        map: 'thor',
        hide: true,
        artifacts: false
      },
      player: {
        hp: 500,
        sprite: "heroes",
        damage: "d6+2"
      },
      enemy: {
        hp: 5,
        sprite: "thor",
        damage: "d2+2"
      }
    }
  };

  return Config;

})());

},{"../ganglere":15}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
"use strict";
var ganglere,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ganglere = require('../ganglere');

ganglere.Credits = (function(_super) {
  __extends(Credits, _super);

  function Credits() {
    return Credits.__super__.constructor.apply(this, arguments);
  }

  Credits.prototype.text = "Program by darkoverlordofdata\n\nSprites by Svetlana Kushnariova\n  lana-chan@yandex.ru\n\nWeb font Eagle Lake by astigmatic\n\nVellum toned paper texture by sporkystock";

  Credits.prototype.copyright = "Copyright 2014 Dark Overlord of Data";

  Credits.prototype.quoteStyle = {
    font: "italic 14px Arial",
    fill: '#000',
    align: 'center'
  };

  Credits.prototype.style = {
    font: "14px Arial",
    fill: '#000',
    align: 'center'
  };

  Credits.prototype.preload = function() {};

  Credits.prototype.create = function() {
    this.add.sprite(0, 0, 'background');
    this.add.sprite(0, 0, 'icon');
    this.add.sprite(0, 10, 'quote');
    this.add.text(10, 150, this.text, this.style);
    this.add.button(this.game.width / 2 - 38, this.game.height - 80, 'backButton', this.goBack, this, 2, 1, 0);
    return this.add.text(50, this.game.height - 40, this.copyright, this.style);
  };

  Credits.prototype.goBack = function() {
    return this.state.start('Intro', true, false);
  };

  return Credits;

})(Phaser.State);

},{"../ganglere":15}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
"use strict";
var ganglere,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ganglere = require('../ganglere');

ganglere.Enemy = (function(_super) {
  __extends(Enemy, _super);

  Enemy.prototype.ai = null;

  function Enemy(game, x, y) {
    this.move = __bind(this.move, this);
    Enemy.__super__.constructor.call(this, game, x, y, game.enemy.sprite);
    this.hp = game.enemy.hp;
    this.damage = game.enemy.damage;
    this.isPlayer = false;
    this.ai = new ganglere.AI(game);
  }

  Enemy.prototype.move = function(player) {
    var deltaX, deltaY;
    deltaX = player.x - this.x;
    deltaY = player.y - this.y;
    if (Math.abs(deltaX) + Math.abs(deltaY) > 6) {
      return this.ai.wander(this);
    } else {
      return this.ai.hunt(this, deltaX, deltaY);
    }
  };

  return Enemy;

})(ganglere.Actor);

},{"../ganglere":15}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
"use strict";
var ganglere,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ganglere = require("../ganglere");

ganglere.GameOver = (function(_super) {
  __extends(GameOver, _super);

  function GameOver() {
    this.create = __bind(this.create, this);
    return GameOver.__super__.constructor.apply(this, arguments);
  }

  GameOver.prototype.create = function() {
    var gameOver;
    gameOver = this.add.text(0, 0, "Game Over\nCtrl+r to restart", {
      fill: "#e22",
      align: "center"
    });
    gameOver.fixedToCamera = true;
    return gameOver.cameraOffset.setTo(0, 0);
  };

  return GameOver;

})(Phaser.State);

},{"../ganglere":15}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
"use strict";
var ganglere,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ganglere = require('../ganglere');

ganglere.Initialize = (function(_super) {
  __extends(Initialize, _super);

  function Initialize() {
    return Initialize.__super__.constructor.apply(this, arguments);
  }

  Initialize.score = 0;

  Initialize.music = null;

  Initialize.orientated = false;

  Initialize.prototype.preload = function() {
    this.load.image('splash', 'assets/images/splash.png');
    this.load.image('preloaderBackground', 'assets/images/progress_bar_background.png');
    return this.load.image('preloaderBar', 'assets/images/progress_bar.png');
  };

  Initialize.prototype.create = function() {
    this.input.maxPointers = 1;
    this.stage.disableVisibilityChange = true;
    if (this.game.device.desktop) {
      this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.scale.minWidth = 320;
      this.scale.minHeight = 480;
      this.scale.maxWidth = 640;
      this.scale.maxHeight = 960;
      this.scale.pageAlignHorizontally = true;
      this.scale.pageAlignVertically = true;
      this.scale.setScreenSize(true);
    } else {
      this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.scale.minWidth = 320;
      this.scale.minHeight = 480;
      this.scale.maxWidth = 640;
      this.scale.maxHeight = 960;
      this.scale.pageAlignHorizontally = true;
      this.scale.pageAlignVertically = true;
      this.scale.forceOrientation(false);
      this.scale.hasResized.add(this.gameResized, this);
      this.scale.enterIncorrectOrientation.add(this.enterIncorrectOrientation, this);
      this.scale.leaveIncorrectOrientation.add(this.leaveIncorrectOrientation, this);
      this.scale.setScreenSize(true);
    }
    return this.state.start('Assets', true, false);
  };

  Initialize.prototype.gameResized = function(width, height) {};

  Initialize.prototype.enterIncorrectOrientation = function() {
    Ganglere.orientated = false;
    return document.getElementById('orientation').style.display = 'block';
  };

  Initialize.prototype.leaveIncorrectOrientation = function() {
    Ganglere.orientated = true;
    return document.getElementById('orientation').style.display = 'none';
  };

  return Initialize;

})(Phaser.State);

},{"../ganglere":15}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
"use strict";
var ganglere,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ganglere = require('../ganglere');

ganglere.Intro = (function(_super) {
  __extends(Intro, _super);

  function Intro() {
    return Intro.__super__.constructor.apply(this, arguments);
  }

  Intro.prototype.preload = function() {};

  Intro.prototype.create = function() {
    this.add.sprite(0, 0, 'splash');
    this.add.button(100, 270, 'playButton', this.startGame, this, 2, 1, 0);
    this.add.button(100, 310, 'creditsButton', this.showCredits, this, 2, 1, 0);
    return this.add.button(100, 350, 'scoreButton', this.showScores, this, 2, 1, 0);
  };

  Intro.prototype.showCredits = function() {
    return this.state.start('Credits', true, false);
  };

  Intro.prototype.showScores = function() {
    return this.state.start('Scores', true, false);
  };

  Intro.prototype.startGame = function() {
    return this.state.start('Levels', true, false, {
      level: 0
    });
  };

  return Intro;

})(Phaser.State);

},{"../ganglere":15}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
"use strict";
var ganglere,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ganglere = require("../ganglere");

ganglere.Levels = (function(_super) {
  var BLACK, HUNTER, WHITE;

  __extends(Levels, _super);

  function Levels() {
    this.showDamage = __bind(this.showDamage, this);
    this.initActors = __bind(this.initActors, this);
    this.fadeOut = __bind(this.fadeOut, this);
    this.label = __bind(this.label, this);
    this.startGame = __bind(this.startGame, this);
    this.moveTo = __bind(this.moveTo, this);
    this.doKeyUp = __bind(this.doKeyUp, this);
    this.onKeyUp = __bind(this.onKeyUp, this);
    this.moveCallback = __bind(this.moveCallback, this);
    this.create = __bind(this.create, this);
    this.init = __bind(this.init, this);
    return Levels.__super__.constructor.apply(this, arguments);
  }

  WHITE = '#fff';

  BLACK = '#000';

  HUNTER = '#ff0044';

  Levels.prototype.automove = true;

  Levels.prototype.inmotion = false;

  Levels.prototype.actorList = null;

  Levels.prototype.actorMap = null;

  Levels.prototype.player = null;

  Levels.prototype.options = null;

  Levels.prototype.hud = null;

  Levels.prototype.map = null;

  Levels.prototype.clickeable = true;

  Levels.prototype.score = 0;

  Levels.prototype.level = 0;

  Levels.prototype.name = 'Splash';

  Levels.prototype.levels = ['Fenris', 'Loke', 'Thor', 'Game Over'];

  Levels.prototype.init = function(options) {
    var key, value;
    for (key in options) {
      value = options[key];
      this[key] = value;
    }
    return this.name = this.levels[this.level];
  };

  Levels.prototype.create = function() {
    var hudStyle, key, value, _ref;
    this.time.advancedTiming = true;
    hudStyle = {
      font: "bold 18px monospace",
      fill: BLACK
    };
    _ref = ganglere.config.levels[this.name];
    for (key in _ref) {
      value = _ref[key];
      console.log(key);
      console.log(value);
      this[key] = value;
    }
    this.map = new ganglere.Map(this);
    this.stage.backgroundColor = "#F0DE9C";
    this.initActors();
    this.map.light();
    this.hud = this.add.text(0, 0, this.label(this.actorList[0].hp, this.score, this.level), hudStyle);
    this.hud.fixedToCamera = true;
    this.hud.cameraOffset.setTo(0, this.game.height - 35);
    this.input.keyboard.addCallbacks(null, null, this.onKeyUp);
    this.input.onDown.add(this.onKeyUp, this);
    this.input.setMoveCallback(this.moveCallback, this);
  };

  Levels.prototype.moveCallback = function() {
    var dx, dy, x, y;
    if (this.clickeable && this.input.activePointer.isDown) {
      this.clickeable = false;
      setTimeout(((function(_this) {
        return function() {
          return _this.clickeable = true;
        };
      })(this)), 400);
      x = this.input.activePointer.worldX;
      y = this.input.activePointer.worldY;
      dx = Math.abs(this.player.sprite.x - x);
      dy = Math.abs(this.player.sprite.y - y);
      if (dx > dy) {
        if (x > this.player.sprite.x) {
          this.onKeyUp({
            keyCode: Phaser.Keyboard.RIGHT
          });
        } else {
          this.onKeyUp({
            keyCode: Phaser.Keyboard.LEFT
          });
        }
      } else {
        if (y > this.player.sprite.y) {
          this.onKeyUp({
            keyCode: Phaser.Keyboard.DOWN
          });
        } else {
          this.onKeyUp({
            keyCode: Phaser.Keyboard.UP
          });
        }
      }
    }
  };

  Levels.prototype.onKeyUp = function(event) {
    var actor, _i, _len, _ref;
    if (!this.actorList[0].isPlayer) {
      return;
    }
    if (this.doKeyUp(event)) {
      this.map.computeLight();
      _ref = this.actorList;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        actor = _ref[_i];
        actor.move(this.player);
        if (this.player.hp < 1) {
          this.fadeOut((function(_this) {
            return function() {
              return _this.state.start('Levels', false, false, {
                level: _this.levels.length,
                win: false
              });
            };
          })(this));
          break;
        }
      }
    }
  };

  Levels.prototype.doKeyUp = function(event) {
    switch (event.keyCode) {
      case Phaser.Keyboard.LEFT:
        return this.moveTo(this.player, {
          x: -1,
          y: 0
        });
      case Phaser.Keyboard.RIGHT:
        return this.moveTo(this.player, {
          x: 1,
          y: 0
        });
      case Phaser.Keyboard.UP:
        return this.moveTo(this.player, {
          x: 0,
          y: -1
        });
      case Phaser.Keyboard.DOWN:
        return this.moveTo(this.player, {
          x: 0,
          y: 1
        });
      default:
        return false;
    }
  };

  Levels.prototype.moveTo = function(actor, delta) {
    var pos, victim;
    if (!this.map.isValidMove(actor, delta)) {
      return false;
    }
    actor.setFrame(delta);
    pos = (actor.x + delta.x) + "_" + (actor.y + delta.y);
    if (this.actorMap[pos] != null) {
      victim = this.actorMap[pos];
      if (actor.isPlayer || victim.isPlayer) {
        actor.attack(victim);
        if (victim.isPlayer) {
          this.hud.setText(this.label(victim.hp, this.score, this.level));
        } else {
          this.score += ganglere.Random.diceRoll("d2+1").total;
          this.hud.setText(this.label(this.actorList[0].hp, this.score, this.level));
        }
        if (victim.hp <= 0) {
          victim.sprite.kill();
          delete this.actorMap[pos];
          this.actorList.splice(this.actorList.indexOf(victim), 1);
          if (victim !== this.player) {
            if (this.actorList.length === 1) {
              this.level++;
              if (this.level < this.levels.length) {
                this.fadeOut((function(_this) {
                  return function() {
                    return _this.state.start('Levels', true, false, {
                      level: _this.level
                    });
                  };
                })(this));
              } else {
                this.fadeOut((function(_this) {
                  return function() {
                    return _this.state.start('Levels', false, false, {
                      level: _this.levels.length,
                      win: true
                    });
                  };
                })(this));
              }
            }
          }
        }
      }
    } else {
      delete this.actorMap[actor.x + "_" + actor.y];
      actor.setXY(actor.x + delta.x, actor.y + delta.y);
      this.actorMap[actor.x + "_" + actor.y] = actor;
    }
    return true;
  };

  Levels.prototype.startGame = function() {
    var startGame;
    startGame = (function(_this) {
      return function() {
        return _this.state.start('Levels', true, false, {
          level: 1
        });
      };
    })(this);
    this.time.events.add(Phaser.Timer.SECOND, startGame, this);
    return this.add.tween(this.start).to({
      alpha: 0
    }, 2000, Phaser.Easing.Linear.None, true);
  };

  Levels.prototype.label = function(hp, score, level) {
    return "life:  " + hp + " score: " + score + " level: " + level;
  };

  Levels.prototype.fadeOut = function(next) {
    return this.time.events.add(Phaser.Timer.SECOND, next, this);
  };

  Levels.prototype.initActors = function() {
    var a, actor, random, validpos, x, y, _i, _j, _k, _ref, _ref1, _ref2, _ref3;
    this.actorList = [];
    this.actorMap = {};
    random = function(max) {
      return Math.floor(Math.random() * max);
    };
    validpos = [];
    for (x = _i = 0, _ref = this.map.width; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
      for (y = _j = 0, _ref1 = this.map.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
        if (!this.map.tiles[x][y]) {
          validpos.push({
            x: x,
            y: y
          });
        }
      }
    }
    for (a = _k = 0, _ref2 = this.options.actors; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; a = 0 <= _ref2 ? ++_k : --_k) {
      while (true) {
        _ref3 = validpos[random(validpos.length)], x = _ref3.x, y = _ref3.y;
        if (!this.actorMap[x + "_" + y]) {
          break;
        }
      }
      actor = a === 0 ? new ganglere.Player(this, x, y) : new ganglere.Enemy(this, x, y);
      this.actorMap[actor.x + "_" + actor.y] = actor;
      this.actorList.push(actor);
    }
    this.player = this.actorList[0];
    this.camera.follow(this.player.sprite);
  };

  Levels.prototype.showDamage = function(text, sprite, speed, color) {
    var damageStyle, x, y;
    if (navigator.notification != null) {
      navigator.notification.vibrate(10);
    }
    damageStyle = {
      align: 'center',
      font: 'bold 40px Courier New, Courier',
      fill: color
    };
    y = sprite.y - 15;
    x = sprite.x + sprite.width / 3;
    text = this.add.text(x, y, text, damageStyle);
    this.add.tween(text).to({
      alpha: 1
    }, Math.floor(speed * 0.75), Phaser.Easing.Bounce.Out, true).to({
      alpha: 0
    }, Math.floor(speed * 0.25), Phaser.Easing.Bounce.In, true);
    return setTimeout(((function(_this) {
      return function() {
        return _this.world.remove(text);
      };
    })(this)), speed);
  };

  return Levels;

})(Phaser.State);

},{"../ganglere":15}],11:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
"use strict";
var ganglere,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ganglere = require('../ganglere');

ganglere.Map = (function() {
  var clone;

  Map.prototype.options = null;

  Map.prototype.tiles = null;

  Map.prototype.map = null;

  Map.prototype.rot = null;

  Map.prototype.height = 0;

  Map.prototype.width = 0;

  Map.prototype.imageheight = 0;

  Map.prototype.imagewidth = 0;

  Map.prototype.tileheight = 0;

  Map.prototype.tilewidth = 0;

  Map.prototype.tileset = '';

  Map.prototype.wall = 0;

  Map.prototype.space = 0;

  Map.prototype.artifacts = null;

  Map.prototype.data = null;

  clone = function(object) {
    return JSON.parse(JSON.stringify(object));
  };

  function Map(level) {
    this.level = level;
    this.addArtifacts = __bind(this.addArtifacts, this);
    this.computeLight = __bind(this.computeLight, this);
    this.resetLight = __bind(this.resetLight, this);
    this.light = __bind(this.light, this);
    this.isValidMove = __bind(this.isValidMove, this);
    this.loadTilemap = __bind(this.loadTilemap, this);
    this.options = this.level.options;
    this.map = this.level.add.tilemap(this.loadTilemap(this.options.map));
    this.map.addTilesetImage(this.tileset, this.tileset);
    this.map.createLayer('layer0', this.level.game.width, this.level.game.height - 40).resizeWorld();
    this.map.createLayer('layer1', this.level.game.width, this.level.game.height - 40).resizeWorld();
    this.tiles = JSON.parse(JSON.stringify(this.rot.map));
  }

  Map.prototype.loadTilemap = function(mapkey) {
    var json;
    json = this.getProperties(clone(this.level.cache.getJSON("" + mapkey + ".json")));
    this.rot = new ROT.Map.Rogue(this.width, this.height);
    this.rot.create((function(_this) {
      return function(x, y, v) {
        return json.layers[0].data[y * _this.width + x] = v === 1 ? _this.wall : _this.space;
      };
    })(this));
    if (this.options.artifacts) {
      this.addArtifacts(json, this.artifacts);
    }
    this.level.cache.addTilemap(mapkey, '', json);
    return mapkey;
  };

  Map.prototype.isValidMove = function(from, delta) {
    return from.x + delta.x >= 0 && from.x + delta.x < this.width && from.y + delta.y >= 0 && from.y + delta.y < this.height && this.tiles[from.x + delta.x][from.y + delta.y] === 0;
  };

  Map.prototype.light = function() {
    this.resetLight();
    this.fov = new ROT.FOV.PreciseShadowcasting((function(_this) {
      return function(x, y) {
        return typeof _this.tiles[x] === 'undefined' || typeof _this.tiles[x][y] === 'undefined' || _this.tiles[x][y] === 0;
      };
    })(this));
    return this.computeLight();
  };

  Map.prototype.resetLight = function() {
    var tile, x, y, _i, _ref, _results;
    if (this.options.hide !== true) {
      return;
    }
    _results = [];
    for (x = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
      _results.push((function() {
        var _j, _ref1, _results1;
        _results1 = [];
        for (y = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          tile = this.map.getTile(x, y, 0);
          if (tile) {
            tile.alpha = 0;
          }
          tile = this.map.getTile(x, y, 1);
          if (tile) {
            _results1.push(tile.alpha = 0);
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  Map.prototype.computeLight = function() {
    this.resetLight();
    this.level.actorList.forEach(function(a) {
      return a.sprite.alpha = 0;
    });
    this.level.actorList[0].sprite.alpha = 1;
    this.fov.compute(this.level.actorList[0].x, this.level.actorList[0].y, 10, (function(_this) {
      return function(x, y, r, visibility) {
        var tile;
        tile = _this.map.getTile(x, y, 0);
        if (tile) {
          tile.alpha = visibility;
        }
        tile = _this.map.getTile(x, y, 1);
        if (tile) {
          tile.alpha = visibility;
        }
        if (_this.level.actorMap.hasOwnProperty(x + '_' + y)) {
          return _this.level.actorMap[x + '_' + y].sprite.alpha = visibility;
        }
      };
    })(this));
    this.map.layers[0].dirty = true;
    return this.map.layers[1].dirty = true;
  };

  Map.prototype.getProperties = function(tilemap) {
    var key, value, _ref;
    this.width = tilemap.width;
    this.height = tilemap.height;
    this.tileset = tilemap.tilesets[0].name;
    this.imageheight = tilemap.tilesets[0].imageheight;
    this.imagewidth = tilemap.tilesets[0].imagewidth;
    this.tileheight = tilemap.tileheight;
    this.tilewidth = tilemap.tilewidth;
    this.backgroundcolor = tilemap.backgroundcolor;
    if (tilemap.properties.wall != null) {
      this.wall = parseInt(tilemap.properties.wall, 10);
    } else {
      this.wall = 0;
    }
    if (tilemap.properties.space != null) {
      this.space = parseInt(tilemap.properties.space, 10);
    } else {
      this.space = (this.imageheight / this.tileheight) * (this.imagewidth / this.tilewidth);
    }
    if (tilemap.properties.artifacts != null) {
      this.artifacts = tilemap.properties.artifacts.split(',').map(function(v) {
        return parseInt(v, 10);
      });
    } else {
      this.artifacts = [];
    }
    this.data = {};
    _ref = tilemap.properties;
    for (key in _ref) {
      value = _ref[key];
      if (/^m\d\d\$/.test(key)) {
        this.data[key.split('$')[1]] = value.split(',').map(function(v) {
          return parseInt(v, 10);
        });
      }
    }
    return tilemap;
  };

  Map.prototype.addArtifacts = function(tilemap, artifacts) {
    var data, direction, exist, i, key, patternArray, tilepos, x, y, _fn, _i, _j, _k, _ref, _ref1, _ref2, _ref3;
    exist = (function(_this) {
      return function(x, y) {
        if (typeof _this.rot.map[x] !== 'undefined' && typeof _this.rot.map[x][y] !== 'undefined' && _this.rot.map[x][y] === 0) {
          return '1';
        } else {
          return '0';
        }
      };
    })(this);
    patternArray = [];
    _ref = this.data;
    _fn = (function(_this) {
      return function(key, data) {
        return patternArray.push({
          pattern: new RegExp(key.replace(/\_/g, '[0-1]')),
          setTile: function(tilepos, x, y) {
            if (data[0] != null) {
              tilemap.layers[1].data[tilepos] = data[0];
              if ((data[1] != null) && y > 0) {
                return tilemap.layers[1].data[(y - 1) * _this.width + x] = data[1];
              }
            } else {
              return tilemap.layers[1].data[tilepos] = ganglere.Random.pick(artifacts);
            }
          }
        });
      };
    })(this);
    for (key in _ref) {
      data = _ref[key];
      _fn(key, data);
    }
    for (y = _i = 0, _ref1 = this.height; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; y = 0 <= _ref1 ? ++_i : --_i) {
      for (x = _j = 0, _ref2 = this.width; 0 <= _ref2 ? _j < _ref2 : _j > _ref2; x = 0 <= _ref2 ? ++_j : --_j) {
        if (this.rot.map[x][y] === 0) {
          continue;
        }
        tilepos = y * this.width + x;
        direction = exist(x - 1, y - 1) + exist(x, y - 1) + exist(x + 1, y - 1) + exist(x - 1, y) + '1' + exist(x + 1, y) + exist(x - 1, y + 1) + exist(x, y + 1) + exist(x + 1, y + 1);
        for (i = _k = 0, _ref3 = patternArray.length; 0 <= _ref3 ? _k < _ref3 : _k > _ref3; i = 0 <= _ref3 ? ++_k : --_k) {
          if (patternArray[i].pattern.test(direction)) {
            patternArray[i].setTile(tilepos, x, y);
            break;
          }
        }
      }
    }
    return tilemap;
  };

  return Map;

})();

},{"../ganglere":15}],12:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
"use strict";
var ganglere,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ganglere = require('../ganglere');

ganglere.Player = (function(_super) {
  __extends(Player, _super);

  function Player(game, x, y) {
    Player.__super__.constructor.call(this, game, x, y, game.player.sprite);
    this.hp = game.player.hp;
    this.damage = game.player.damage;
    this.isPlayer = true;
  }

  return Player;

})(ganglere.Actor);

},{"../ganglere":15}],13:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
"use strict";
var ganglere;

ganglere = require('../ganglere');

ganglere.Random = (function() {
  function Random() {}

  Random.pick = function(array) {
    return array[Math.floor(Math.random() * array.length)];
  };

  Random.diceRoll = function(data) {
    var dataSplit, dices, i, n, ret, sides;
    data = " " + data;
    dataSplit = data.split(/-|\+|d/g);
    dices = parseInt(dataSplit[0], 10);
    if (!dices) {
      dices = 1;
    }
    sides = parseInt(dataSplit[1], 10);
    ret = {
      diceRoll: [],
      number: 0,
      bonus: 0
    };
    ret.number = 0;
    n = void 0;
    i = 0;
    while (i < dices) {
      n = 1 + Math.floor(Math.random() * sides);
      ret.diceRoll.push(n);
      ret.number += n;
      i++;
    }
    if (dataSplit[2]) {
      ret.bonus = parseInt(dataSplit[2], 10);
      if (data.indexOf("-") > -1) {
        ret.bonus = ret.bonus * -1;
      }
    }
    ret.total = ret.number + ret.bonus;
    return ret;
  };

  return Random;

})();

},{"../ganglere":15}],14:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
"use strict";
var ganglere,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ganglere = require('../ganglere');

ganglere.Scores = (function(_super) {
  __extends(Scores, _super);

  function Scores() {
    return Scores.__super__.constructor.apply(this, arguments);
  }

  Scores.prototype.preload = function() {};

  Scores.prototype.create = function() {
    this.add.sprite(0, 0, 'background');
    this.add.sprite(0, 0, 'icon');
    this.add.sprite(0, 10, 'quote');
    return this.add.button(this.game.width / 2 - 38, this.game.height - 80, 'backButton', this.goBack, this, 2, 1, 0);
  };

  Scores.prototype.goBack = function() {
    return this.state.start('Intro', true, false);
  };

  return Scores;

})(Phaser.State);

},{"../ganglere":15}],15:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
"use strict";
var ganglere,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = ganglere = (function(_super) {
  __extends(ganglere, _super);

  ganglere.prototype.id = '';

  ganglere.prototype.width = 320;

  ganglere.prototype.height = 480;

  ganglere.prototype.renderer = Phaser.AUTO;

  function ganglere(id) {
    this.id = id;
    ganglere.__super__.constructor.call(this, this.width, this.height, this.renderer, this.id);
    this.state.add('Initialize', ganglere.Initialize, false);
    this.state.add('Assets', ganglere.Assets, false);
    this.state.add('Intro', ganglere.Intro, false);
    this.state.add('Credits', ganglere.Credits, false);
    this.state.add('Scores', ganglere.Scores, false);
    this.state.add('Levels', ganglere.Levels, false);
    this.state.add('GameOver', ganglere.GameOver, false);
    this.state.start('Initialize');
  }

  return ganglere;

})(Phaser.Game);

require('./Config');

require('./Random');

require('./AI');

require('./Actor');

require('./Player');

require('./Enemy');

require('./Map');

require('./Assets');

require('./Initialize');

require('./Intro');

require('./Credits');

require('./Scores');

require('./Levels');

require('./GameOver');

},{"./AI":1,"./Actor":2,"./Assets":3,"./Config":4,"./Credits":5,"./Enemy":6,"./GameOver":7,"./Initialize":8,"./Intro":9,"./Levels":10,"./Map":11,"./Player":12,"./Random":13,"./Scores":14}],16:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
"use strict";
var ganglere;

window.game = null;

ganglere = require('./ganglere');

window.addEventListener('load', function() {
  if (typeof FastClick !== "undefined" && FastClick !== null) {
    FastClick.attach(document.body);
  }
  return setTimeout(function() {
    document.getElementById("logo").style.display = 'none';
    document.getElementById("title").style.display = 'none';
    document.body.style.backgroundColor = 'black';
    return new ganglere('game');
  }, 1000);
}, false);

},{"./ganglere":15}]},{},[16])
//# sourceMappingURL=data:application/json;base64,
